//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GPAS.Workspace.ServiceAccess.RemoteService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KGraphArrangement", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities")]
    [System.SerializableAttribute()]
    public partial class KGraphArrangement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DataSourceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] GraphArrangementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] GraphImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NodesCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DataSourceID {
            get {
                return this.DataSourceIDField;
            }
            set {
                if ((this.DataSourceIDField.Equals(value) != true)) {
                    this.DataSourceIDField = value;
                    this.RaisePropertyChanged("DataSourceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] GraphArrangement {
            get {
                return this.GraphArrangementField;
            }
            set {
                if ((object.ReferenceEquals(this.GraphArrangementField, value) != true)) {
                    this.GraphArrangementField = value;
                    this.RaisePropertyChanged("GraphArrangement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] GraphImage {
            get {
                return this.GraphImageField;
            }
            set {
                if ((object.ReferenceEquals(this.GraphImageField, value) != true)) {
                    this.GraphImageField = value;
                    this.RaisePropertyChanged("GraphImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NodesCount {
            get {
                return this.NodesCountField;
            }
            set {
                if ((this.NodesCountField.Equals(value) != true)) {
                    this.NodesCountField = value;
                    this.RaisePropertyChanged("NodesCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeCreated {
            get {
                return this.TimeCreatedField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeCreatedField, value) != true)) {
                    this.TimeCreatedField = value;
                    this.RaisePropertyChanged("TimeCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseModel", Namespace="http://schemas.datacontract.org/2004/07/GPAS.FilterSearch")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GPAS.Workspace.ServiceAccess.RemoteService.CriteriaBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GPAS.Workspace.ServiceAccess.RemoteService.CriteriaSet))]
    public partial class BaseModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CriteriaBase", Namespace="http://schemas.datacontract.org/2004/07/GPAS.FilterSearch")]
    [System.SerializableAttribute()]
    public partial class CriteriaBase : GPAS.Workspace.ServiceAccess.RemoteService.BaseModel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CriteriaSet", Namespace="http://schemas.datacontract.org/2004/07/GPAS.FilterSearch")]
    [System.SerializableAttribute()]
    public partial class CriteriaSet : GPAS.Workspace.ServiceAccess.RemoteService.BaseModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Workspace.ServiceAccess.RemoteService.CriteriaBase[] CriteriasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Workspace.ServiceAccess.RemoteService.BooleanOperator SetOperatorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Workspace.ServiceAccess.RemoteService.CriteriaBase[] Criterias {
            get {
                return this.CriteriasField;
            }
            set {
                if ((object.ReferenceEquals(this.CriteriasField, value) != true)) {
                    this.CriteriasField = value;
                    this.RaisePropertyChanged("Criterias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Workspace.ServiceAccess.RemoteService.BooleanOperator SetOperator {
            get {
                return this.SetOperatorField;
            }
            set {
                if ((this.SetOperatorField.Equals(value) != true)) {
                    this.SetOperatorField = value;
                    this.RaisePropertyChanged("SetOperator");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BooleanOperator", Namespace="http://schemas.datacontract.org/2004/07/GPAS.FilterSearch")]
    public enum BooleanOperator : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Any = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SemiStructuredDataImportRequestMetadata", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities")]
    [System.SerializableAttribute()]
    public partial class SemiStructuredDataImportRequestMetadata : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] serializedACLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] serializedMaterialBaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] serializedTypeMappingField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] serializedACL {
            get {
                return this.serializedACLField;
            }
            set {
                if ((object.ReferenceEquals(this.serializedACLField, value) != true)) {
                    this.serializedACLField = value;
                    this.RaisePropertyChanged("serializedACL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] serializedMaterialBase {
            get {
                return this.serializedMaterialBaseField;
            }
            set {
                if ((object.ReferenceEquals(this.serializedMaterialBaseField, value) != true)) {
                    this.serializedMaterialBaseField = value;
                    this.RaisePropertyChanged("serializedMaterialBase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] serializedTypeMapping {
            get {
                return this.serializedTypeMappingField;
            }
            set {
                if ((object.ReferenceEquals(this.serializedTypeMappingField, value) != true)) {
                    this.serializedTypeMappingField = value;
                    this.RaisePropertyChanged("serializedTypeMapping");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobRequest", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.Jobs")]
    [System.SerializableAttribute()]
    public partial class JobRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BeginTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastPublishedObjectIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastPublishedRelationIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegisterTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Workspace.ServiceAccess.RemoteService.JobRequestStatus StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusMeesageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Workspace.ServiceAccess.RemoteService.JobRequestType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BeginTime {
            get {
                return this.BeginTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.BeginTimeField, value) != true)) {
                    this.BeginTimeField = value;
                    this.RaisePropertyChanged("BeginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EndTimeField, value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastPublishedObjectIndex {
            get {
                return this.LastPublishedObjectIndexField;
            }
            set {
                if ((object.ReferenceEquals(this.LastPublishedObjectIndexField, value) != true)) {
                    this.LastPublishedObjectIndexField = value;
                    this.RaisePropertyChanged("LastPublishedObjectIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastPublishedRelationIndex {
            get {
                return this.LastPublishedRelationIndexField;
            }
            set {
                if ((object.ReferenceEquals(this.LastPublishedRelationIndexField, value) != true)) {
                    this.LastPublishedRelationIndexField = value;
                    this.RaisePropertyChanged("LastPublishedRelationIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegisterTime {
            get {
                return this.RegisterTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.RegisterTimeField, value) != true)) {
                    this.RegisterTimeField = value;
                    this.RaisePropertyChanged("RegisterTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Workspace.ServiceAccess.RemoteService.JobRequestStatus State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusMeesage {
            get {
                return this.StatusMeesageField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusMeesageField, value) != true)) {
                    this.StatusMeesageField = value;
                    this.RaisePropertyChanged("StatusMeesage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Workspace.ServiceAccess.RemoteService.JobRequestType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobRequestStatus", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.Jobs")]
    public enum JobRequestStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pending = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Busy = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Timeout = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Terminated = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pause = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Resume = 7,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobRequestType", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.Jobs")]
    public enum JobRequestType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportFromCsvFile = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportFromExcelSheet = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportFromAttachedDatabaseTableOrView = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportFromEmlDirectory = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportFromAccessTable = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StreamingIngestion", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.DatalakeEntities")]
    [System.SerializableAttribute()]
    public partial class StreamingIngestion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeadersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InputPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> RelatedDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Workspace.ServiceAccess.RemoteService.FileSeparator StreamingDataSeparatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime startTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Headers {
            get {
                return this.HeadersField;
            }
            set {
                if ((object.ReferenceEquals(this.HeadersField, value) != true)) {
                    this.HeadersField = value;
                    this.RaisePropertyChanged("Headers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InputPort {
            get {
                return this.InputPortField;
            }
            set {
                if ((object.ReferenceEquals(this.InputPortField, value) != true)) {
                    this.InputPortField = value;
                    this.RaisePropertyChanged("InputPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> RelatedDateTime {
            get {
                return this.RelatedDateTimeField;
            }
            set {
                if ((this.RelatedDateTimeField.Equals(value) != true)) {
                    this.RelatedDateTimeField = value;
                    this.RaisePropertyChanged("RelatedDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Workspace.ServiceAccess.RemoteService.FileSeparator StreamingDataSeparator {
            get {
                return this.StreamingDataSeparatorField;
            }
            set {
                if ((this.StreamingDataSeparatorField.Equals(value) != true)) {
                    this.StreamingDataSeparatorField = value;
                    this.RaisePropertyChanged("StreamingDataSeparator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime startTime {
            get {
                return this.startTimeField;
            }
            set {
                if ((this.startTimeField.Equals(value) != true)) {
                    this.startTimeField = value;
                    this.RaisePropertyChanged("startTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileSeparator", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.DatalakeEntities")]
    public enum FileSeparator : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tab = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Comma = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pipe = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sharp = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Slash = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchCriteria", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.DatalakeEntities")]
    [System.SerializableAttribute()]
    public partial class SearchCriteria : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Workspace.ServiceAccess.RemoteService.ComparatorType ComparatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Workspace.ServiceAccess.RemoteService.BaseDataType CriteriaDataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Workspace.ServiceAccess.RemoteService.ComparatorType Comparator {
            get {
                return this.ComparatorField;
            }
            set {
                if ((this.ComparatorField.Equals(value) != true)) {
                    this.ComparatorField = value;
                    this.RaisePropertyChanged("Comparator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Workspace.ServiceAccess.RemoteService.BaseDataType CriteriaDataType {
            get {
                return this.CriteriaDataTypeField;
            }
            set {
                if ((this.CriteriaDataTypeField.Equals(value) != true)) {
                    this.CriteriaDataTypeField = value;
                    this.RaisePropertyChanged("CriteriaDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComparatorType", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.DatalakeEntities")]
    public enum ComparatorType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Equal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Like = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LessThan = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        greatorThan = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseDataType", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.DatalakeEntities")]
    public enum BaseDataType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Integer = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Double = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Date = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        String = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IngestionFile", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.DatalakeEntities")]
    [System.SerializableAttribute()]
    public partial class IngestionFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DataFlowDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Workspace.ServiceAccess.RemoteService.FileSeparator FileSeparatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeadersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeBeginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DataFlowDateTime {
            get {
                return this.DataFlowDateTimeField;
            }
            set {
                if ((this.DataFlowDateTimeField.Equals(value) != true)) {
                    this.DataFlowDateTimeField = value;
                    this.RaisePropertyChanged("DataFlowDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilePath {
            get {
                return this.FilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.FilePathField, value) != true)) {
                    this.FilePathField = value;
                    this.RaisePropertyChanged("FilePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Workspace.ServiceAccess.RemoteService.FileSeparator FileSeparator {
            get {
                return this.FileSeparatorField;
            }
            set {
                if ((this.FileSeparatorField.Equals(value) != true)) {
                    this.FileSeparatorField = value;
                    this.RaisePropertyChanged("FileSeparator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Headers {
            get {
                return this.HeadersField;
            }
            set {
                if ((object.ReferenceEquals(this.HeadersField, value) != true)) {
                    this.HeadersField = value;
                    this.RaisePropertyChanged("Headers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeBegin {
            get {
                return this.TimeBeginField;
            }
            set {
                if ((this.TimeBeginField.Equals(value) != true)) {
                    this.TimeBeginField = value;
                    this.RaisePropertyChanged("TimeBegin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataSourceACL", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities")]
    [System.SerializableAttribute()]
    public partial class DataSourceACL : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.AccessControl.ACL AclField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.AccessControl.ACL Acl {
            get {
                return this.AclField;
            }
            set {
                if ((object.ReferenceEquals(this.AclField, value) != true)) {
                    this.AclField = value;
                    this.RaisePropertyChanged("Acl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectoryContent", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities")]
    [System.SerializableAttribute()]
    public partial class DirectoryContent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Workspace.ServiceAccess.RemoteService.DirectoryContentType ContentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UriAddressField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Workspace.ServiceAccess.RemoteService.DirectoryContentType ContentType {
            get {
                return this.ContentTypeField;
            }
            set {
                if ((this.ContentTypeField.Equals(value) != true)) {
                    this.ContentTypeField = value;
                    this.RaisePropertyChanged("ContentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UriAddress {
            get {
                return this.UriAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.UriAddressField, value) != true)) {
                    this.UriAddressField = value;
                    this.RaisePropertyChanged("UriAddress");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectoryContentType", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities")]
    public enum DirectoryContentType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Directory = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        File = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeographicalLocationModel", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities")]
    [System.SerializableAttribute()]
    public partial class GeographicalLocationModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ip {
            get {
                return this.IpField;
            }
            set {
                if ((object.ReferenceEquals(this.IpField, value) != true)) {
                    this.IpField = value;
                    this.RaisePropertyChanged("Ip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Point", Namespace="http://schemas.datacontract.org/2004/07/System.Drawing")]
    [System.SerializableAttribute()]
    public partial struct Point : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int xField;
        
        private int yField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int x {
            get {
                return this.xField;
            }
            set {
                if ((this.xField.Equals(value) != true)) {
                    this.xField = value;
                    this.RaisePropertyChanged("x");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int y {
            get {
                return this.yField;
            }
            set {
                if ((this.yField.Equals(value) != true)) {
                    this.yField = value;
                    this.RaisePropertyChanged("y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvestigationInfo", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GPAS.Workspace.ServiceAccess.RemoteService.KInvestigation))]
    public partial class InvestigationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedTime {
            get {
                return this.CreatedTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedTimeField, value) != true)) {
                    this.CreatedTimeField = value;
                    this.RaisePropertyChanged("CreatedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KInvestigation", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities")]
    [System.SerializableAttribute()]
    public partial class KInvestigation : GPAS.Workspace.ServiceAccess.RemoteService.InvestigationInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] InvestigationImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] InvestigationStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] InvestigationImage {
            get {
                return this.InvestigationImageField;
            }
            set {
                if ((object.ReferenceEquals(this.InvestigationImageField, value) != true)) {
                    this.InvestigationImageField = value;
                    this.RaisePropertyChanged("InvestigationImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] InvestigationStatus {
            get {
                return this.InvestigationStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.InvestigationStatusField, value) != true)) {
                    this.InvestigationStatusField = value;
                    this.RaisePropertyChanged("InvestigationStatus");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseSearchResult", Namespace="http://schemas.datacontract.org/2004/07/GPAS.TextualSearch")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GPAS.Workspace.ServiceAccess.RemoteService.DocumentBasedSearchResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GPAS.Workspace.ServiceAccess.RemoteService.ObjectBasedSearchResult))]
    public partial class BaseSearchResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long FoundNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ObjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TotalRowField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FoundNumber {
            get {
                return this.FoundNumberField;
            }
            set {
                if ((this.FoundNumberField.Equals(value) != true)) {
                    this.FoundNumberField = value;
                    this.RaisePropertyChanged("FoundNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((this.ObjectIdField.Equals(value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalRow {
            get {
                return this.TotalRowField;
            }
            set {
                if ((this.TotalRowField.Equals(value) != true)) {
                    this.TotalRowField = value;
                    this.RaisePropertyChanged("TotalRow");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentBasedSearchResult", Namespace="http://schemas.datacontract.org/2004/07/GPAS.TextualSearch")]
    [System.SerializableAttribute()]
    public partial class DocumentBasedSearchResult : GPAS.Workspace.ServiceAccess.RemoteService.BaseSearchResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Workspace.ServiceAccess.RemoteService.TextResult TextResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeURIField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Workspace.ServiceAccess.RemoteService.TextResult TextResult {
            get {
                return this.TextResultField;
            }
            set {
                if ((object.ReferenceEquals(this.TextResultField, value) != true)) {
                    this.TextResultField = value;
                    this.RaisePropertyChanged("TextResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeURI {
            get {
                return this.TypeURIField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeURIField, value) != true)) {
                    this.TypeURIField = value;
                    this.RaisePropertyChanged("TypeURI");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObjectBasedSearchResult", Namespace="http://schemas.datacontract.org/2004/07/GPAS.TextualSearch")]
    [System.SerializableAttribute()]
    public partial class ObjectBasedSearchResult : GPAS.Workspace.ServiceAccess.RemoteService.BaseSearchResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Workspace.ServiceAccess.RemoteService.TextResult TextResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeURIField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Workspace.ServiceAccess.RemoteService.TextResult TextResult {
            get {
                return this.TextResultField;
            }
            set {
                if ((object.ReferenceEquals(this.TextResultField, value) != true)) {
                    this.TextResultField = value;
                    this.RaisePropertyChanged("TextResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeURI {
            get {
                return this.TypeURIField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeURIField, value) != true)) {
                    this.TypeURIField = value;
                    this.RaisePropertyChanged("TypeURI");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextResult", Namespace="http://schemas.datacontract.org/2004/07/GPAS.TextualSearch")]
    [System.SerializableAttribute()]
    public partial class TextResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PartOfTextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PartOfText {
            get {
                return this.PartOfTextField;
            }
            set {
                if ((object.ReferenceEquals(this.PartOfTextField, value) != true)) {
                    this.PartOfTextField = value;
                    this.RaisePropertyChanged("PartOfText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteService.IWorkspaceService")]
    public interface IWorkspaceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetObjectListById", ReplyAction="http://tempuri.org/IWorkspaceService/GetObjectListByIdResponse")]
        GPAS.Dispatch.Entities.Concepts.KObject[] GetObjectListById(long[] dbObjectIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetObjectListById", ReplyAction="http://tempuri.org/IWorkspaceService/GetObjectListByIdResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> GetObjectListByIdAsync(long[] dbObjectIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPropertyForObject", ReplyAction="http://tempuri.org/IWorkspaceService/GetPropertyForObjectResponse")]
        GPAS.Dispatch.Entities.Concepts.KProperty[] GetPropertyForObject(GPAS.Dispatch.Entities.Concepts.KObject kObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPropertyForObject", ReplyAction="http://tempuri.org/IWorkspaceService/GetPropertyForObjectResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KProperty[]> GetPropertyForObjectAsync(GPAS.Dispatch.Entities.Concepts.KObject kObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPropertyForObjects", ReplyAction="http://tempuri.org/IWorkspaceService/GetPropertyForObjectsResponse")]
        GPAS.Dispatch.Entities.Concepts.KProperty[] GetPropertyForObjects(long[] dbObjIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPropertyForObjects", ReplyAction="http://tempuri.org/IWorkspaceService/GetPropertyForObjectsResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KProperty[]> GetPropertyForObjectsAsync(long[] dbObjIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPropertyListById", ReplyAction="http://tempuri.org/IWorkspaceService/GetPropertyListByIdResponse")]
        GPAS.Dispatch.Entities.Concepts.KProperty[] GetPropertyListById(long[] dbOPropertyIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPropertyListById", ReplyAction="http://tempuri.org/IWorkspaceService/GetPropertyListByIdResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KProperty[]> GetPropertyListByIdAsync(long[] dbOPropertyIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetSpecifiedPropertiesOfObjectsByTypes", ReplyAction="http://tempuri.org/IWorkspaceService/GetSpecifiedPropertiesOfObjectsByTypesRespon" +
            "se")]
        GPAS.Dispatch.Entities.Concepts.KProperty[] GetSpecifiedPropertiesOfObjectsByTypes(long[] objectsId, string[] propertiesType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetSpecifiedPropertiesOfObjectsByTypes", ReplyAction="http://tempuri.org/IWorkspaceService/GetSpecifiedPropertiesOfObjectsByTypesRespon" +
            "se")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KProperty[]> GetSpecifiedPropertiesOfObjectsByTypesAsync(long[] objectsId, string[] propertiesType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetSpecifiedPropertiesOfObjectsByTypeAndValu" +
            "e", ReplyAction="http://tempuri.org/IWorkspaceService/GetSpecifiedPropertiesOfObjectsByTypeAndValu" +
            "eResponse")]
        GPAS.Dispatch.Entities.Concepts.KProperty[] GetSpecifiedPropertiesOfObjectsByTypeAndValue(long[] objectIDs, string propertiesTypeUri, string propertiesValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetSpecifiedPropertiesOfObjectsByTypeAndValu" +
            "e", ReplyAction="http://tempuri.org/IWorkspaceService/GetSpecifiedPropertiesOfObjectsByTypeAndValu" +
            "eResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KProperty[]> GetSpecifiedPropertiesOfObjectsByTypeAndValueAsync(long[] objectIDs, string propertiesTypeUri, string propertiesValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetLinksSourcedByObject", ReplyAction="http://tempuri.org/IWorkspaceService/GetLinksSourcedByObjectResponse")]
        GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[] GetLinksSourcedByObject(GPAS.Dispatch.Entities.Concepts.KObject kObject, string relationshipTypeURI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetLinksSourcedByObject", ReplyAction="http://tempuri.org/IWorkspaceService/GetLinksSourcedByObjectResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[]> GetLinksSourcedByObjectAsync(GPAS.Dispatch.Entities.Concepts.KObject kObject, string relationshipTypeURI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetRelationshipListById", ReplyAction="http://tempuri.org/IWorkspaceService/GetRelationshipListByIdResponse")]
        GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[] GetRelationshipListById(long[] dbRelationshipIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetRelationshipListById", ReplyAction="http://tempuri.org/IWorkspaceService/GetRelationshipListByIdResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[]> GetRelationshipListByIdAsync(long[] dbRelationshipIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetRelationshipsBySourceObject", ReplyAction="http://tempuri.org/IWorkspaceService/GetRelationshipsBySourceObjectResponse")]
        GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[] GetRelationshipsBySourceObject(long objectID, string typeURI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetRelationshipsBySourceObject", ReplyAction="http://tempuri.org/IWorkspaceService/GetRelationshipsBySourceObjectResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[]> GetRelationshipsBySourceObjectAsync(long objectID, string typeURI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetExistingRelationship", ReplyAction="http://tempuri.org/IWorkspaceService/GetExistingRelationshipResponse")]
        GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink GetExistingRelationship(string typeURI, long source, long target, GPAS.Dispatch.Entities.Concepts.LinkDirection direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetExistingRelationship", ReplyAction="http://tempuri.org/IWorkspaceService/GetExistingRelationshipResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink> GetExistingRelationshipAsync(string typeURI, long source, long target, GPAS.Dispatch.Entities.Concepts.LinkDirection direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetMediaUrisForObject", ReplyAction="http://tempuri.org/IWorkspaceService/GetMediaUrisForObjectResponse")]
        GPAS.Dispatch.Entities.Concepts.KMedia[] GetMediaUrisForObject(long objectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetMediaUrisForObject", ReplyAction="http://tempuri.org/IWorkspaceService/GetMediaUrisForObjectResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KMedia[]> GetMediaUrisForObjectAsync(long objectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPublishedGraphs", ReplyAction="http://tempuri.org/IWorkspaceService/GetPublishedGraphsResponse")]
        GPAS.Workspace.ServiceAccess.RemoteService.KGraphArrangement[] GetPublishedGraphs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPublishedGraphs", ReplyAction="http://tempuri.org/IWorkspaceService/GetPublishedGraphsResponse")]
        System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.KGraphArrangement[]> GetPublishedGraphsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPublishedGraphImage", ReplyAction="http://tempuri.org/IWorkspaceService/GetPublishedGraphImageResponse")]
        byte[] GetPublishedGraphImage(int kGraphArrangementID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPublishedGraphImage", ReplyAction="http://tempuri.org/IWorkspaceService/GetPublishedGraphImageResponse")]
        System.Threading.Tasks.Task<byte[]> GetPublishedGraphImageAsync(int kGraphArrangementID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPublishedGraph", ReplyAction="http://tempuri.org/IWorkspaceService/GetPublishedGraphResponse")]
        byte[] GetPublishedGraph(int kGraphArrangementID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPublishedGraph", ReplyAction="http://tempuri.org/IWorkspaceService/GetPublishedGraphResponse")]
        System.Threading.Tasks.Task<byte[]> GetPublishedGraphAsync(int kGraphArrangementID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/QuickSearch", ReplyAction="http://tempuri.org/IWorkspaceService/QuickSearchResponse")]
        GPAS.Dispatch.Entities.Concepts.KObject[] QuickSearch(string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/QuickSearch", ReplyAction="http://tempuri.org/IWorkspaceService/QuickSearchResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> QuickSearchAsync(string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformFilterSearch", ReplyAction="http://tempuri.org/IWorkspaceService/PerformFilterSearchResponse")]
        GPAS.Dispatch.Entities.Concepts.KObject[] PerformFilterSearch(byte[] stream, System.Nullable<int> count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformFilterSearch", ReplyAction="http://tempuri.org/IWorkspaceService/PerformFilterSearchResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> PerformFilterSearchAsync(byte[] stream, System.Nullable<int> count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformSelectMatching", ReplyAction="http://tempuri.org/IWorkspaceService/PerformSelectMatchingResponse")]
        long[] PerformSelectMatching(byte[] stream, long[] ObjectIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformSelectMatching", ReplyAction="http://tempuri.org/IWorkspaceService/PerformSelectMatchingResponse")]
        System.Threading.Tasks.Task<long[]> PerformSelectMatchingAsync(byte[] stream, long[] ObjectIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FindRelatedEntities", ReplyAction="http://tempuri.org/IWorkspaceService/FindRelatedEntitiesResponse")]
        GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResult FindRelatedEntities(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FindRelatedEntities", ReplyAction="http://tempuri.org/IWorkspaceService/FindRelatedEntitiesResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResult> FindRelatedEntitiesAsync(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FindRelatedDocuments", ReplyAction="http://tempuri.org/IWorkspaceService/FindRelatedDocumentsResponse")]
        GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResult FindRelatedDocuments(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FindRelatedDocuments", ReplyAction="http://tempuri.org/IWorkspaceService/FindRelatedDocumentsResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResult> FindRelatedDocumentsAsync(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FindRelatedEvents", ReplyAction="http://tempuri.org/IWorkspaceService/FindRelatedEventsResponse")]
        GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResult FindRelatedEvents(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FindRelatedEvents", ReplyAction="http://tempuri.org/IWorkspaceService/FindRelatedEventsResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResult> FindRelatedEventsAsync(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FindRelatedEntitiesAppearedInEvents", ReplyAction="http://tempuri.org/IWorkspaceService/FindRelatedEntitiesAppearedInEventsResponse")]
        GPAS.Dispatch.Entities.Concepts.SearchAroundResult.EventBasedResult FindRelatedEntitiesAppearedInEvents(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FindRelatedEntitiesAppearedInEvents", ReplyAction="http://tempuri.org/IWorkspaceService/FindRelatedEntitiesAppearedInEventsResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.EventBasedResult> FindRelatedEntitiesAppearedInEventsAsync(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FindPropertiesSameWith", ReplyAction="http://tempuri.org/IWorkspaceService/FindPropertiesSameWithResponse")]
        GPAS.Dispatch.Entities.Concepts.SearchAroundResult.PropertyBasedResult FindPropertiesSameWith(GPAS.Dispatch.Entities.Concepts.KProperty[] properties, int loadNResults, int totalResultsThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FindPropertiesSameWith", ReplyAction="http://tempuri.org/IWorkspaceService/FindPropertiesSameWithResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.PropertyBasedResult> FindPropertiesSameWithAsync(GPAS.Dispatch.Entities.Concepts.KProperty[] properties, int loadNResults, int totalResultsThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformCustomSearchAround", ReplyAction="http://tempuri.org/IWorkspaceService/PerformCustomSearchAroundResponse")]
        GPAS.SearchAround.CustomSearchAroundResult PerformCustomSearchAround(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, byte[] serializedCustomSearchAroundCriteria, int totalResultsThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformCustomSearchAround", ReplyAction="http://tempuri.org/IWorkspaceService/PerformCustomSearchAroundResponse")]
        System.Threading.Tasks.Task<GPAS.SearchAround.CustomSearchAroundResult> PerformCustomSearchAroundAsync(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, byte[] serializedCustomSearchAroundCriteria, int totalResultsThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformGeoCircleSearch", ReplyAction="http://tempuri.org/IWorkspaceService/PerformGeoCircleSearchResponse")]
        GPAS.Dispatch.Entities.Concepts.KObject[] PerformGeoCircleSearch(GPAS.GeoSearch.CircleSearchCriteria circleSearchCriteria, int maxResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformGeoCircleSearch", ReplyAction="http://tempuri.org/IWorkspaceService/PerformGeoCircleSearchResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> PerformGeoCircleSearchAsync(GPAS.GeoSearch.CircleSearchCriteria circleSearchCriteria, int maxResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformGeoPolygonSearch", ReplyAction="http://tempuri.org/IWorkspaceService/PerformGeoPolygonSearchResponse")]
        GPAS.Dispatch.Entities.Concepts.KObject[] PerformGeoPolygonSearch(GPAS.GeoSearch.PolygonSearchCriteria polygonSearchCriteria, int maxResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformGeoPolygonSearch", ReplyAction="http://tempuri.org/IWorkspaceService/PerformGeoPolygonSearchResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> PerformGeoPolygonSearchAsync(GPAS.GeoSearch.PolygonSearchCriteria polygonSearchCriteria, int maxResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformGeoCircleFilterSearch", ReplyAction="http://tempuri.org/IWorkspaceService/PerformGeoCircleFilterSearchResponse")]
        GPAS.Dispatch.Entities.Concepts.KObject[] PerformGeoCircleFilterSearch(GPAS.GeoSearch.CircleSearchCriteria circleSearchCriteria, GPAS.Workspace.ServiceAccess.RemoteService.CriteriaSet filterSearchCriteria, int maxResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformGeoCircleFilterSearch", ReplyAction="http://tempuri.org/IWorkspaceService/PerformGeoCircleFilterSearchResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> PerformGeoCircleFilterSearchAsync(GPAS.GeoSearch.CircleSearchCriteria circleSearchCriteria, GPAS.Workspace.ServiceAccess.RemoteService.CriteriaSet filterSearchCriteria, int maxResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformGeoPolygonFilterSearch", ReplyAction="http://tempuri.org/IWorkspaceService/PerformGeoPolygonFilterSearchResponse")]
        GPAS.Dispatch.Entities.Concepts.KObject[] PerformGeoPolygonFilterSearch(GPAS.GeoSearch.PolygonSearchCriteria polygonSearchCriteria, GPAS.Workspace.ServiceAccess.RemoteService.CriteriaSet filterSearchCriteria, int maxResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformGeoPolygonFilterSearch", ReplyAction="http://tempuri.org/IWorkspaceService/PerformGeoPolygonFilterSearchResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> PerformGeoPolygonFilterSearchAsync(GPAS.GeoSearch.PolygonSearchCriteria polygonSearchCriteria, GPAS.Workspace.ServiceAccess.RemoteService.CriteriaSet filterSearchCriteria, int maxResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/Publish", ReplyAction="http://tempuri.org/IWorkspaceService/PublishResponse")]
        GPAS.Dispatch.Entities.Publish.PublishResult Publish(GPAS.Dispatch.Entities.Publish.AddedConcepts addedConcept, GPAS.Dispatch.Entities.Publish.ModifiedConcepts modifiedConcept, long dataSourceID, bool isContinousPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/Publish", ReplyAction="http://tempuri.org/IWorkspaceService/PublishResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Publish.PublishResult> PublishAsync(GPAS.Dispatch.Entities.Publish.AddedConcepts addedConcept, GPAS.Dispatch.Entities.Publish.ModifiedConcepts modifiedConcept, long dataSourceID, bool isContinousPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FinalizeContinousPublish", ReplyAction="http://tempuri.org/IWorkspaceService/FinalizeContinousPublishResponse")]
        void FinalizeContinousPublish();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FinalizeContinousPublish", ReplyAction="http://tempuri.org/IWorkspaceService/FinalizeContinousPublishResponse")]
        System.Threading.Tasks.Task FinalizeContinousPublishAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/CanPerformNewPublish", ReplyAction="http://tempuri.org/IWorkspaceService/CanPerformNewPublishResponse")]
        bool CanPerformNewPublish();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/CanPerformNewPublish", ReplyAction="http://tempuri.org/IWorkspaceService/CanPerformNewPublishResponse")]
        System.Threading.Tasks.Task<bool> CanPerformNewPublishAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RegisterNewDataSourceToRepositoryServer", ReplyAction="http://tempuri.org/IWorkspaceService/RegisterNewDataSourceToRepositoryServerRespo" +
            "nse")]
        void RegisterNewDataSourceToRepositoryServer(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RegisterNewDataSourceToRepositoryServer", ReplyAction="http://tempuri.org/IWorkspaceService/RegisterNewDataSourceToRepositoryServerRespo" +
            "nse")]
        System.Threading.Tasks.Task RegisterNewDataSourceToRepositoryServerAsync(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/SynchronizeNewDataSourceInSearchServer", ReplyAction="http://tempuri.org/IWorkspaceService/SynchronizeNewDataSourceInSearchServerRespon" +
            "se")]
        void SynchronizeNewDataSourceInSearchServer(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/SynchronizeNewDataSourceInSearchServer", ReplyAction="http://tempuri.org/IWorkspaceService/SynchronizeNewDataSourceInSearchServerRespon" +
            "se")]
        System.Threading.Tasks.Task SynchronizeNewDataSourceInSearchServerAsync(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PublishGraph", ReplyAction="http://tempuri.org/IWorkspaceService/PublishGraphResponse")]
        GPAS.Workspace.ServiceAccess.RemoteService.KGraphArrangement PublishGraph(long id, string title, string description, byte[] GraphImage, byte[] GraphArrangement, int nodesCount, string timeCreated, long dataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PublishGraph", ReplyAction="http://tempuri.org/IWorkspaceService/PublishGraphResponse")]
        System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.KGraphArrangement> PublishGraphAsync(long id, string title, string description, byte[] GraphImage, byte[] GraphArrangement, int nodesCount, string timeCreated, long dataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DeletePublishedGraph", ReplyAction="http://tempuri.org/IWorkspaceService/DeletePublishedGraphResponse")]
        bool DeletePublishedGraph(int graphID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DeletePublishedGraph", ReplyAction="http://tempuri.org/IWorkspaceService/DeletePublishedGraphResponse")]
        System.Threading.Tasks.Task<bool> DeletePublishedGraphAsync(int graphID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewObjectId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewObjectIdResponse")]
        long GetNewObjectId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewObjectId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewObjectIdResponse")]
        System.Threading.Tasks.Task<long> GetNewObjectIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewObjectIdRange", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewObjectIdRangeResponse")]
        long GetNewObjectIdRange(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewObjectIdRange", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewObjectIdRangeResponse")]
        System.Threading.Tasks.Task<long> GetNewObjectIdRangeAsync(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewPropertyId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewPropertyIdResponse")]
        long GetNewPropertyId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewPropertyId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewPropertyIdResponse")]
        System.Threading.Tasks.Task<long> GetNewPropertyIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewPropertyIdRange", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewPropertyIdRangeResponse")]
        long GetNewPropertyIdRange(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewPropertyIdRange", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewPropertyIdRangeResponse")]
        System.Threading.Tasks.Task<long> GetNewPropertyIdRangeAsync(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewRelationId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewRelationIdResponse")]
        long GetNewRelationId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewRelationId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewRelationIdResponse")]
        System.Threading.Tasks.Task<long> GetNewRelationIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewRelationIdRange", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewRelationIdRangeResponse")]
        long GetNewRelationIdRange(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewRelationIdRange", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewRelationIdRangeResponse")]
        System.Threading.Tasks.Task<long> GetNewRelationIdRangeAsync(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewMediaId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewMediaIdResponse")]
        long GetNewMediaId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewMediaId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewMediaIdResponse")]
        System.Threading.Tasks.Task<long> GetNewMediaIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewMediaIdRange", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewMediaIdRangeResponse")]
        long GetNewMediaIdRange(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewMediaIdRange", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewMediaIdRangeResponse")]
        System.Threading.Tasks.Task<long> GetNewMediaIdRangeAsync(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewGraphId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewGraphIdResponse")]
        long GetNewGraphId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewGraphId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewGraphIdResponse")]
        System.Threading.Tasks.Task<long> GetNewGraphIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewInvestigationId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewInvestigationIdResponse")]
        long GetNewInvestigationId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewInvestigationId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewInvestigationIdResponse")]
        System.Threading.Tasks.Task<long> GetNewInvestigationIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewDataSourceId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewDataSourceIdResponse")]
        long GetNewDataSourceId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetNewDataSourceId", ReplyAction="http://tempuri.org/IWorkspaceService/GetNewDataSourceIdResponse")]
        System.Threading.Tasks.Task<long> GetNewDataSourceIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RegisterNewImportRequests", ReplyAction="http://tempuri.org/IWorkspaceService/RegisterNewImportRequestsResponse")]
        void RegisterNewImportRequests(GPAS.Workspace.ServiceAccess.RemoteService.SemiStructuredDataImportRequestMetadata[] requestsData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RegisterNewImportRequests", ReplyAction="http://tempuri.org/IWorkspaceService/RegisterNewImportRequestsResponse")]
        System.Threading.Tasks.Task RegisterNewImportRequestsAsync(GPAS.Workspace.ServiceAccess.RemoteService.SemiStructuredDataImportRequestMetadata[] requestsData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetJobRequests", ReplyAction="http://tempuri.org/IWorkspaceService/GetJobRequestsResponse")]
        GPAS.Workspace.ServiceAccess.RemoteService.JobRequest[] GetJobRequests();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetJobRequests", ReplyAction="http://tempuri.org/IWorkspaceService/GetJobRequestsResponse")]
        System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.JobRequest[]> GetJobRequestsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetUriOfDatabasesForImport", ReplyAction="http://tempuri.org/IWorkspaceService/GetUriOfDatabasesForImportResponse")]
        string[] GetUriOfDatabasesForImport();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetUriOfDatabasesForImport", ReplyAction="http://tempuri.org/IWorkspaceService/GetUriOfDatabasesForImportResponse")]
        System.Threading.Tasks.Task<string[]> GetUriOfDatabasesForImportAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetTablesAndViewsOfDatabaseForImport", ReplyAction="http://tempuri.org/IWorkspaceService/GetTablesAndViewsOfDatabaseForImportResponse" +
            "")]
        System.Data.DataSet GetTablesAndViewsOfDatabaseForImport(string dbForImportURI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetTablesAndViewsOfDatabaseForImport", ReplyAction="http://tempuri.org/IWorkspaceService/GetTablesAndViewsOfDatabaseForImportResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTablesAndViewsOfDatabaseForImportAsync(string dbForImportURI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/StartStreamingIngestion", ReplyAction="http://tempuri.org/IWorkspaceService/StartStreamingIngestionResponse")]
        void StartStreamingIngestion(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/StartStreamingIngestion", ReplyAction="http://tempuri.org/IWorkspaceService/StartStreamingIngestionResponse")]
        System.Threading.Tasks.Task StartStreamingIngestionAsync(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/StopStreamingIngestion", ReplyAction="http://tempuri.org/IWorkspaceService/StopStreamingIngestionResponse")]
        void StopStreamingIngestion(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/StopStreamingIngestion", ReplyAction="http://tempuri.org/IWorkspaceService/StopStreamingIngestionResponse")]
        System.Threading.Tasks.Task StopStreamingIngestionAsync(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetJobsStatus", ReplyAction="http://tempuri.org/IWorkspaceService/GetJobsStatusResponse")]
        string[] GetJobsStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetJobsStatus", ReplyAction="http://tempuri.org/IWorkspaceService/GetJobsStatusResponse")]
        System.Threading.Tasks.Task<string[]> GetJobsStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetStreamJobsStatus", ReplyAction="http://tempuri.org/IWorkspaceService/GetStreamJobsStatusResponse")]
        string[] GetStreamJobsStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetStreamJobsStatus", ReplyAction="http://tempuri.org/IWorkspaceService/GetStreamJobsStatusResponse")]
        System.Threading.Tasks.Task<string[]> GetStreamJobsStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPreviewDataFromDatalake", ReplyAction="http://tempuri.org/IWorkspaceService/GetPreviewDataFromDatalakeResponse")]
        string[] GetPreviewDataFromDatalake(string category, string dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetPreviewDataFromDatalake", ReplyAction="http://tempuri.org/IWorkspaceService/GetPreviewDataFromDatalakeResponse")]
        System.Threading.Tasks.Task<string[]> GetPreviewDataFromDatalakeAsync(string category, string dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDatalakeSlice", ReplyAction="http://tempuri.org/IWorkspaceService/GetDatalakeSliceResponse")]
        string[] GetDatalakeSlice(string category, string dateTime, GPAS.Workspace.ServiceAccess.RemoteService.SearchCriteria[] searchCriterias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDatalakeSlice", ReplyAction="http://tempuri.org/IWorkspaceService/GetDatalakeSliceResponse")]
        System.Threading.Tasks.Task<string[]> GetDatalakeSliceAsync(string category, string dateTime, GPAS.Workspace.ServiceAccess.RemoteService.SearchCriteria[] searchCriterias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDatalakeCategories", ReplyAction="http://tempuri.org/IWorkspaceService/GetDatalakeCategoriesResponse")]
        string[] GetDatalakeCategories(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDatalakeCategories", ReplyAction="http://tempuri.org/IWorkspaceService/GetDatalakeCategoriesResponse")]
        System.Threading.Tasks.Task<string[]> GetDatalakeCategoriesAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDatalakeSliceHeaders", ReplyAction="http://tempuri.org/IWorkspaceService/GetDatalakeSliceHeadersResponse")]
        string[] GetDatalakeSliceHeaders(string category, string dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDatalakeSliceHeaders", ReplyAction="http://tempuri.org/IWorkspaceService/GetDatalakeSliceHeadersResponse")]
        System.Threading.Tasks.Task<string[]> GetDatalakeSliceHeadersAsync(string category, string dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/InsertFileIngestionJobStatus", ReplyAction="http://tempuri.org/IWorkspaceService/InsertFileIngestionJobStatusResponse")]
        void InsertFileIngestionJobStatus(GPAS.Workspace.ServiceAccess.RemoteService.IngestionFile ingestionFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/InsertFileIngestionJobStatus", ReplyAction="http://tempuri.org/IWorkspaceService/InsertFileIngestionJobStatusResponse")]
        System.Threading.Tasks.Task InsertFileIngestionJobStatusAsync(GPAS.Workspace.ServiceAccess.RemoteService.IngestionFile ingestionFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/InsertStreamIngestionStartStatus", ReplyAction="http://tempuri.org/IWorkspaceService/InsertStreamIngestionStartStatusResponse")]
        void InsertStreamIngestionStartStatus(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/InsertStreamIngestionStartStatus", ReplyAction="http://tempuri.org/IWorkspaceService/InsertStreamIngestionStartStatusResponse")]
        System.Threading.Tasks.Task InsertStreamIngestionStartStatusAsync(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/InsertStreamIngestionStopStatus", ReplyAction="http://tempuri.org/IWorkspaceService/InsertStreamIngestionStopStatusResponse")]
        void InsertStreamIngestionStopStatus(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/InsertStreamIngestionStopStatus", ReplyAction="http://tempuri.org/IWorkspaceService/InsertStreamIngestionStopStatusResponse")]
        System.Threading.Tasks.Task InsertStreamIngestionStopStatusAsync(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/IsListenProcessorExist", ReplyAction="http://tempuri.org/IWorkspaceService/IsListenProcessorExistResponse")]
        bool IsListenProcessorExist(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/IsListenProcessorExist", ReplyAction="http://tempuri.org/IWorkspaceService/IsListenProcessorExistResponse")]
        System.Threading.Tasks.Task<bool> IsListenProcessorExistAsync(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/Authenticate", ReplyAction="http://tempuri.org/IWorkspaceService/AuthenticateResponse")]
        bool Authenticate(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/Authenticate", ReplyAction="http://tempuri.org/IWorkspaceService/AuthenticateResponse")]
        System.Threading.Tasks.Task<bool> AuthenticateAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDispatchCurrentDateTime", ReplyAction="http://tempuri.org/IWorkspaceService/GetDispatchCurrentDateTimeResponse")]
        string GetDispatchCurrentDateTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDispatchCurrentDateTime", ReplyAction="http://tempuri.org/IWorkspaceService/GetDispatchCurrentDateTimeResponse")]
        System.Threading.Tasks.Task<string> GetDispatchCurrentDateTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetGroups", ReplyAction="http://tempuri.org/IWorkspaceService/GetGroupsResponse")]
        GPAS.AccessControl.Groups.GroupInfo[] GetGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetGroups", ReplyAction="http://tempuri.org/IWorkspaceService/GetGroupsResponse")]
        System.Threading.Tasks.Task<GPAS.AccessControl.Groups.GroupInfo[]> GetGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetClassificationBasedPermissionForGroups", ReplyAction="http://tempuri.org/IWorkspaceService/GetClassificationBasedPermissionForGroupsRes" +
            "ponse")]
        GPAS.AccessControl.GroupClassificationBasedPermission[] GetClassificationBasedPermissionForGroups(string[] groupNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetClassificationBasedPermissionForGroups", ReplyAction="http://tempuri.org/IWorkspaceService/GetClassificationBasedPermissionForGroupsRes" +
            "ponse")]
        System.Threading.Tasks.Task<GPAS.AccessControl.GroupClassificationBasedPermission[]> GetClassificationBasedPermissionForGroupsAsync(string[] groupNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetGroupsOfUser", ReplyAction="http://tempuri.org/IWorkspaceService/GetGroupsOfUserResponse")]
        string[] GetGroupsOfUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetGroupsOfUser", ReplyAction="http://tempuri.org/IWorkspaceService/GetGroupsOfUserResponse")]
        System.Threading.Tasks.Task<string[]> GetGroupsOfUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDataSourceACL", ReplyAction="http://tempuri.org/IWorkspaceService/GetDataSourceACLResponse")]
        GPAS.Workspace.ServiceAccess.RemoteService.DataSourceACL[] GetDataSourceACL(long[] dataSourceIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDataSourceACL", ReplyAction="http://tempuri.org/IWorkspaceService/GetDataSourceACLResponse")]
        System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.DataSourceACL[]> GetDataSourceACLAsync(long[] dataSourceIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetReadableSubsetOfConcepts", ReplyAction="http://tempuri.org/IWorkspaceService/GetReadableSubsetOfConceptsResponse")]
        System.Tuple<long[], long[]> GetReadableSubsetOfConcepts(long[] objIDs, long[] relationshipIDs, string[] groupNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetReadableSubsetOfConcepts", ReplyAction="http://tempuri.org/IWorkspaceService/GetReadableSubsetOfConceptsResponse")]
        System.Threading.Tasks.Task<System.Tuple<long[], long[]>> GetReadableSubsetOfConceptsAsync(long[] objIDs, long[] relationshipIDs, string[] groupNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetMediaPathContent", ReplyAction="http://tempuri.org/IWorkspaceService/GetMediaPathContentResponse")]
        GPAS.Workspace.ServiceAccess.RemoteService.DirectoryContent[] GetMediaPathContent(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetMediaPathContent", ReplyAction="http://tempuri.org/IWorkspaceService/GetMediaPathContentResponse")]
        System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.DirectoryContent[]> GetMediaPathContentAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DeleteMediaDirectory", ReplyAction="http://tempuri.org/IWorkspaceService/DeleteMediaDirectoryResponse")]
        bool DeleteMediaDirectory(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DeleteMediaDirectory", ReplyAction="http://tempuri.org/IWorkspaceService/DeleteMediaDirectoryResponse")]
        System.Threading.Tasks.Task<bool> DeleteMediaDirectoryAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/CreateMediaDirectory", ReplyAction="http://tempuri.org/IWorkspaceService/CreateMediaDirectoryResponse")]
        bool CreateMediaDirectory(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/CreateMediaDirectory", ReplyAction="http://tempuri.org/IWorkspaceService/CreateMediaDirectoryResponse")]
        System.Threading.Tasks.Task<bool> CreateMediaDirectoryAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RenameMediaDirectory", ReplyAction="http://tempuri.org/IWorkspaceService/RenameMediaDirectoryResponse")]
        bool RenameMediaDirectory(string sourcePath, string targetPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RenameMediaDirectory", ReplyAction="http://tempuri.org/IWorkspaceService/RenameMediaDirectoryResponse")]
        System.Threading.Tasks.Task<bool> RenameMediaDirectoryAsync(string sourcePath, string targetPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DownloadMediaFile", ReplyAction="http://tempuri.org/IWorkspaceService/DownloadMediaFileResponse")]
        byte[] DownloadMediaFile(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DownloadMediaFile", ReplyAction="http://tempuri.org/IWorkspaceService/DownloadMediaFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadMediaFileAsync(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadMediaFile", ReplyAction="http://tempuri.org/IWorkspaceService/UploadMediaFileResponse")]
        bool UploadMediaFile(byte[] fileToUpload, string fileName, string targetPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadMediaFile", ReplyAction="http://tempuri.org/IWorkspaceService/UploadMediaFileResponse")]
        System.Threading.Tasks.Task<bool> UploadMediaFileAsync(byte[] fileToUpload, string fileName, string targetPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadDataSourceFileByName", ReplyAction="http://tempuri.org/IWorkspaceService/UploadDataSourceFileByNameResponse")]
        void UploadDataSourceFileByName(string docName, byte[] docContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadDataSourceFileByName", ReplyAction="http://tempuri.org/IWorkspaceService/UploadDataSourceFileByNameResponse")]
        System.Threading.Tasks.Task UploadDataSourceFileByNameAsync(string docName, byte[] docContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadDocumentFile", ReplyAction="http://tempuri.org/IWorkspaceService/UploadDocumentFileResponse")]
        void UploadDocumentFile(long docID, byte[] docContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadDocumentFile", ReplyAction="http://tempuri.org/IWorkspaceService/UploadDocumentFileResponse")]
        System.Threading.Tasks.Task UploadDocumentFileAsync(long docID, byte[] docContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadDataSourceFile", ReplyAction="http://tempuri.org/IWorkspaceService/UploadDataSourceFileResponse")]
        void UploadDataSourceFile(long dataSourceID, byte[] dataSourceContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadDataSourceFile", ReplyAction="http://tempuri.org/IWorkspaceService/UploadDataSourceFileResponse")]
        System.Threading.Tasks.Task UploadDataSourceFileAsync(long dataSourceID, byte[] dataSourceContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadFileAsDocumentAndDataSource", ReplyAction="http://tempuri.org/IWorkspaceService/UploadFileAsDocumentAndDataSourceResponse")]
        void UploadFileAsDocumentAndDataSource(byte[] fileContent, long docID, long dataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadFileAsDocumentAndDataSource", ReplyAction="http://tempuri.org/IWorkspaceService/UploadFileAsDocumentAndDataSourceResponse")]
        System.Threading.Tasks.Task UploadFileAsDocumentAndDataSourceAsync(byte[] fileContent, long docID, long dataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadDocumentFromJobShare", ReplyAction="http://tempuri.org/IWorkspaceService/UploadDocumentFromJobShareResponse")]
        void UploadDocumentFromJobShare(long docID, string docJobSharePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadDocumentFromJobShare", ReplyAction="http://tempuri.org/IWorkspaceService/UploadDocumentFromJobShareResponse")]
        System.Threading.Tasks.Task UploadDocumentFromJobShareAsync(long docID, string docJobSharePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadDataSourceFromJobShare", ReplyAction="http://tempuri.org/IWorkspaceService/UploadDataSourceFromJobShareResponse")]
        void UploadDataSourceFromJobShare(long dataSourceID, string dataSourceJobSharePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UploadDataSourceFromJobShare", ReplyAction="http://tempuri.org/IWorkspaceService/UploadDataSourceFromJobShareResponse")]
        System.Threading.Tasks.Task UploadDataSourceFromJobShareAsync(long dataSourceID, string dataSourceJobSharePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DownloadDocumentFile", ReplyAction="http://tempuri.org/IWorkspaceService/DownloadDocumentFileResponse")]
        byte[] DownloadDocumentFile(long docID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DownloadDocumentFile", ReplyAction="http://tempuri.org/IWorkspaceService/DownloadDocumentFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadDocumentFileAsync(long docID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DownloadDataSourceFile", ReplyAction="http://tempuri.org/IWorkspaceService/DownloadDataSourceFileResponse")]
        byte[] DownloadDataSourceFile(long dataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DownloadDataSourceFile", ReplyAction="http://tempuri.org/IWorkspaceService/DownloadDataSourceFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadDataSourceFileAsync(long dataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DownloadDataSourceFileByName", ReplyAction="http://tempuri.org/IWorkspaceService/DownloadDataSourceFileByNameResponse")]
        byte[] DownloadDataSourceFileByName(string dataSourceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DownloadDataSourceFileByName", ReplyAction="http://tempuri.org/IWorkspaceService/DownloadDataSourceFileByNameResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadDataSourceFileByNameAsync(string dataSourceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetOntology", ReplyAction="http://tempuri.org/IWorkspaceService/GetOntologyResponse")]
        System.IO.Stream GetOntology();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetOntology", ReplyAction="http://tempuri.org/IWorkspaceService/GetOntologyResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetOntologyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetIcon", ReplyAction="http://tempuri.org/IWorkspaceService/GetIconResponse")]
        System.IO.Stream GetIcon();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetIcon", ReplyAction="http://tempuri.org/IWorkspaceService/GetIconResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetIconAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UpdateOntologyFile", ReplyAction="http://tempuri.org/IWorkspaceService/UpdateOntologyFileResponse")]
        void UpdateOntologyFile(System.IO.Stream reader);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/UpdateOntologyFile", ReplyAction="http://tempuri.org/IWorkspaceService/UpdateOntologyFileResponse")]
        System.Threading.Tasks.Task UpdateOntologyFileAsync(System.IO.Stream reader);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetMapTileImage", ReplyAction="http://tempuri.org/IWorkspaceService/GetMapTileImageResponse")]
        byte[] GetMapTileImage(string tileSource, int zoomLevel, long x, long y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetMapTileImage", ReplyAction="http://tempuri.org/IWorkspaceService/GetMapTileImageResponse")]
        System.Threading.Tasks.Task<byte[]> GetMapTileImageAsync(string tileSource, int zoomLevel, long x, long y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetGeoLocationBaseOnIP", ReplyAction="http://tempuri.org/IWorkspaceService/GetGeoLocationBaseOnIPResponse")]
        GPAS.Workspace.ServiceAccess.RemoteService.GeographicalLocationModel GetGeoLocationBaseOnIP(string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetGeoLocationBaseOnIP", ReplyAction="http://tempuri.org/IWorkspaceService/GetGeoLocationBaseOnIPResponse")]
        System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.GeographicalLocationModel> GetGeoLocationBaseOnIPAsync(string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/InsertGeoSpecialInformationBasedOnIP", ReplyAction="http://tempuri.org/IWorkspaceService/InsertGeoSpecialInformationBasedOnIPResponse" +
            "")]
        bool InsertGeoSpecialInformationBasedOnIP(string ip, double latitude, double longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/InsertGeoSpecialInformationBasedOnIP", ReplyAction="http://tempuri.org/IWorkspaceService/InsertGeoSpecialInformationBasedOnIPResponse" +
            "")]
        System.Threading.Tasks.Task<bool> InsertGeoSpecialInformationBasedOnIPAsync(string ip, double latitude, double longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetMapTileSources", ReplyAction="http://tempuri.org/IWorkspaceService/GetMapTileSourcesResponse")]
        string[] GetMapTileSources();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetMapTileSources", ReplyAction="http://tempuri.org/IWorkspaceService/GetMapTileSourcesResponse")]
        System.Threading.Tasks.Task<string[]> GetMapTileSourcesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDocumentPlaneText", ReplyAction="http://tempuri.org/IWorkspaceService/GetDocumentPlaneTextResponse")]
        string GetDocumentPlaneText(long docID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDocumentPlaneText", ReplyAction="http://tempuri.org/IWorkspaceService/GetDocumentPlaneTextResponse")]
        System.Threading.Tasks.Task<string> GetDocumentPlaneTextAsync(long docID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DetectLanguage", ReplyAction="http://tempuri.org/IWorkspaceService/DetectLanguageResponse")]
        GPAS.Dispatch.Entities.NLP.DetectedLanguage[] DetectLanguage(string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/DetectLanguage", ReplyAction="http://tempuri.org/IWorkspaceService/DetectLanguageResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.NLP.DetectedLanguage[]> DetectLanguageAsync(string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetTagCloud", ReplyAction="http://tempuri.org/IWorkspaceService/GetTagCloudResponse")]
        GPAS.Dispatch.Entities.NLP.TagCloudKeyPhrase[] GetTagCloud(string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetTagCloud", ReplyAction="http://tempuri.org/IWorkspaceService/GetTagCloudResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.NLP.TagCloudKeyPhrase[]> GetTagCloudAsync(string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetLanguageTagCloud", ReplyAction="http://tempuri.org/IWorkspaceService/GetLanguageTagCloudResponse")]
        GPAS.Dispatch.Entities.NLP.TagCloudKeyPhrase[] GetLanguageTagCloud(string content, GPAS.Dispatch.Entities.NLP.Language language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetLanguageTagCloud", ReplyAction="http://tempuri.org/IWorkspaceService/GetLanguageTagCloudResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.NLP.TagCloudKeyPhrase[]> GetLanguageTagCloudAsync(string content, GPAS.Dispatch.Entities.NLP.Language language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetSummarize", ReplyAction="http://tempuri.org/IWorkspaceService/GetSummarizeResponse")]
        string[] GetSummarize(GPAS.Dispatch.Entities.NLP.SummarizationRequest summarizationRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetSummarize", ReplyAction="http://tempuri.org/IWorkspaceService/GetSummarizeResponse")]
        System.Threading.Tasks.Task<string[]> GetSummarizeAsync(GPAS.Dispatch.Entities.NLP.SummarizationRequest summarizationRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetLanguageSummarize", ReplyAction="http://tempuri.org/IWorkspaceService/GetLanguageSummarizeResponse")]
        string[] GetLanguageSummarize(GPAS.Dispatch.Entities.NLP.SummarizationRequest summarizationRequest, GPAS.Dispatch.Entities.NLP.Language lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetLanguageSummarize", ReplyAction="http://tempuri.org/IWorkspaceService/GetLanguageSummarizeResponse")]
        System.Threading.Tasks.Task<string[]> GetLanguageSummarizeAsync(GPAS.Dispatch.Entities.NLP.SummarizationRequest summarizationRequest, GPAS.Dispatch.Entities.NLP.Language lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/IsNLPServiceInstalled", ReplyAction="http://tempuri.org/IWorkspaceService/IsNLPServiceInstalledResponse")]
        bool IsNLPServiceInstalled();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/IsNLPServiceInstalled", ReplyAction="http://tempuri.org/IWorkspaceService/IsNLPServiceInstalledResponse")]
        System.Threading.Tasks.Task<bool> IsNLPServiceInstalledAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDataSources", ReplyAction="http://tempuri.org/IWorkspaceService/GetDataSourcesResponse")]
        GPAS.AccessControl.DataSourceInfo[] GetDataSources(long dataSourceType, int star, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetDataSources", ReplyAction="http://tempuri.org/IWorkspaceService/GetDataSourcesResponse")]
        System.Threading.Tasks.Task<GPAS.AccessControl.DataSourceInfo[]> GetDataSourcesAsync(long dataSourceType, int star, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetAllDataSources", ReplyAction="http://tempuri.org/IWorkspaceService/GetAllDataSourcesResponse")]
        GPAS.AccessControl.DataSourceInfo[] GetAllDataSources(string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetAllDataSources", ReplyAction="http://tempuri.org/IWorkspaceService/GetAllDataSourcesResponse")]
        System.Threading.Tasks.Task<GPAS.AccessControl.DataSourceInfo[]> GetAllDataSourcesAsync(string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FaceDetection", ReplyAction="http://tempuri.org/IWorkspaceService/FaceDetectionResponse")]
        GPAS.Dispatch.Entities.Concepts.ImageProcessing.BoundingBox[] FaceDetection(byte[] imageFile, string extention);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FaceDetection", ReplyAction="http://tempuri.org/IWorkspaceService/FaceDetectionResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.ImageProcessing.BoundingBox[]> FaceDetectionAsync(byte[] imageFile, string extention);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FaceRecognition", ReplyAction="http://tempuri.org/IWorkspaceService/FaceRecognitionResponse")]
        GPAS.Dispatch.Entities.Concepts.ImageProcessing.RetrievedFaceKObject[] FaceRecognition(byte[] imageFile, string extention, GPAS.Dispatch.Entities.Concepts.ImageProcessing.BoundingBox[] boundingBoxs, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/FaceRecognition", ReplyAction="http://tempuri.org/IWorkspaceService/FaceRecognitionResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.ImageProcessing.RetrievedFaceKObject[]> FaceRecognitionAsync(byte[] imageFile, string extention, GPAS.Dispatch.Entities.Concepts.ImageProcessing.BoundingBox[] boundingBoxs, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/IsMachneVisonServiceInstalled", ReplyAction="http://tempuri.org/IWorkspaceService/IsMachneVisonServiceInstalledResponse")]
        bool IsMachneVisonServiceInstalled();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/IsMachneVisonServiceInstalled", ReplyAction="http://tempuri.org/IWorkspaceService/IsMachneVisonServiceInstalledResponse")]
        System.Threading.Tasks.Task<bool> IsMachneVisonServiceInstalledAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RunStatisticalQuery", ReplyAction="http://tempuri.org/IWorkspaceService/RunStatisticalQueryResponse")]
        GPAS.StatisticalQuery.QueryResult RunStatisticalQuery(byte[] queryByteArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RunStatisticalQuery", ReplyAction="http://tempuri.org/IWorkspaceService/RunStatisticalQueryResponse")]
        System.Threading.Tasks.Task<GPAS.StatisticalQuery.QueryResult> RunStatisticalQueryAsync(byte[] queryByteArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RetrieveObjectIDsByStatisticalQuery", ReplyAction="http://tempuri.org/IWorkspaceService/RetrieveObjectIDsByStatisticalQueryResponse")]
        long[] RetrieveObjectIDsByStatisticalQuery(byte[] queryByteArray, int PassObjectsCountLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RetrieveObjectIDsByStatisticalQuery", ReplyAction="http://tempuri.org/IWorkspaceService/RetrieveObjectIDsByStatisticalQueryResponse")]
        System.Threading.Tasks.Task<long[]> RetrieveObjectIDsByStatisticalQueryAsync(byte[] queryByteArray, int PassObjectsCountLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RetrievePropertyValueStatistics", ReplyAction="http://tempuri.org/IWorkspaceService/RetrievePropertyValueStatisticsResponse")]
        GPAS.StatisticalQuery.PropertyValueStatistics RetrievePropertyValueStatistics(byte[] statQueryByteArray, string exploredPropertyTypeUri, int startOffset, int resultsLimit, long minimumCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RetrievePropertyValueStatistics", ReplyAction="http://tempuri.org/IWorkspaceService/RetrievePropertyValueStatisticsResponse")]
        System.Threading.Tasks.Task<GPAS.StatisticalQuery.PropertyValueStatistics> RetrievePropertyValueStatisticsAsync(byte[] statQueryByteArray, string exploredPropertyTypeUri, int startOffset, int resultsLimit, long minimumCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RetrievePropertyBarValuesStatistics", ReplyAction="http://tempuri.org/IWorkspaceService/RetrievePropertyBarValuesStatisticsResponse")]
        GPAS.StatisticalQuery.ResultNode.PropertyBarValues RetrievePropertyBarValuesStatistics(byte[] queryByteArray, string exploredPropertyTypeUri, long bucketCount, double minValue, double maxValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RetrievePropertyBarValuesStatistics", ReplyAction="http://tempuri.org/IWorkspaceService/RetrievePropertyBarValuesStatisticsResponse")]
        System.Threading.Tasks.Task<GPAS.StatisticalQuery.ResultNode.PropertyBarValues> RetrievePropertyBarValuesStatisticsAsync(byte[] queryByteArray, string exploredPropertyTypeUri, long bucketCount, double minValue, double maxValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RetrieveLinkTypeStatistics", ReplyAction="http://tempuri.org/IWorkspaceService/RetrieveLinkTypeStatisticsResponse")]
        GPAS.StatisticalQuery.LinkTypeStatistics RetrieveLinkTypeStatistics(byte[] queryByteArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RetrieveLinkTypeStatistics", ReplyAction="http://tempuri.org/IWorkspaceService/RetrieveLinkTypeStatisticsResponse")]
        System.Threading.Tasks.Task<GPAS.StatisticalQuery.LinkTypeStatistics> RetrieveLinkTypeStatisticsAsync(byte[] queryByteArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RetrieveLinkedObjectIDsByStatisticalQuery", ReplyAction="http://tempuri.org/IWorkspaceService/RetrieveLinkedObjectIDsByStatisticalQueryRes" +
            "ponse")]
        long[] RetrieveLinkedObjectIDsByStatisticalQuery(byte[] queryByteArray, int PassObjectsCountLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/RetrieveLinkedObjectIDsByStatisticalQuery", ReplyAction="http://tempuri.org/IWorkspaceService/RetrieveLinkedObjectIDsByStatisticalQueryRes" +
            "ponse")]
        System.Threading.Tasks.Task<long[]> RetrieveLinkedObjectIDsByStatisticalQueryAsync(byte[] queryByteArray, int PassObjectsCountLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/SaveInvestigation", ReplyAction="http://tempuri.org/IWorkspaceService/SaveInvestigationResponse")]
        void SaveInvestigation(GPAS.Workspace.ServiceAccess.RemoteService.KInvestigation kInvestigation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/SaveInvestigation", ReplyAction="http://tempuri.org/IWorkspaceService/SaveInvestigationResponse")]
        System.Threading.Tasks.Task SaveInvestigationAsync(GPAS.Workspace.ServiceAccess.RemoteService.KInvestigation kInvestigation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetSavedInvestigations", ReplyAction="http://tempuri.org/IWorkspaceService/GetSavedInvestigationsResponse")]
        GPAS.Workspace.ServiceAccess.RemoteService.InvestigationInfo[] GetSavedInvestigations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetSavedInvestigations", ReplyAction="http://tempuri.org/IWorkspaceService/GetSavedInvestigationsResponse")]
        System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.InvestigationInfo[]> GetSavedInvestigationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetSavedInvestigationImage", ReplyAction="http://tempuri.org/IWorkspaceService/GetSavedInvestigationImageResponse")]
        byte[] GetSavedInvestigationImage(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetSavedInvestigationImage", ReplyAction="http://tempuri.org/IWorkspaceService/GetSavedInvestigationImageResponse")]
        System.Threading.Tasks.Task<byte[]> GetSavedInvestigationImageAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetSavedInvestigationStatus", ReplyAction="http://tempuri.org/IWorkspaceService/GetSavedInvestigationStatusResponse")]
        byte[] GetSavedInvestigationStatus(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetSavedInvestigationStatus", ReplyAction="http://tempuri.org/IWorkspaceService/GetSavedInvestigationStatusResponse")]
        System.Threading.Tasks.Task<byte[]> GetSavedInvestigationStatusAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetTimeLineMaxFrequecyCount", ReplyAction="http://tempuri.org/IWorkspaceService/GetTimeLineMaxFrequecyCountResponse")]
        long GetTimeLineMaxFrequecyCount(string[] propertiesTypeUri, string binLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetTimeLineMaxFrequecyCount", ReplyAction="http://tempuri.org/IWorkspaceService/GetTimeLineMaxFrequecyCountResponse")]
        System.Threading.Tasks.Task<long> GetTimeLineMaxFrequecyCountAsync(string[] propertiesTypeUri, string binLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetTimeLineMaxDate", ReplyAction="http://tempuri.org/IWorkspaceService/GetTimeLineMaxDateResponse")]
        System.DateTime GetTimeLineMaxDate(string[] propertiesTypeUri, string binLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetTimeLineMaxDate", ReplyAction="http://tempuri.org/IWorkspaceService/GetTimeLineMaxDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetTimeLineMaxDateAsync(string[] propertiesTypeUri, string binLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetTimeLineMinDate", ReplyAction="http://tempuri.org/IWorkspaceService/GetTimeLineMinDateResponse")]
        System.DateTime GetTimeLineMinDate(string[] propertiesTypeUri, string binLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/GetTimeLineMinDate", ReplyAction="http://tempuri.org/IWorkspaceService/GetTimeLineMinDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetTimeLineMinDateAsync(string[] propertiesTypeUri, string binLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformTextualSearch", ReplyAction="http://tempuri.org/IWorkspaceService/PerformTextualSearchResponse")]
        GPAS.Workspace.ServiceAccess.RemoteService.BaseSearchResult[] PerformTextualSearch(byte[] stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkspaceService/PerformTextualSearch", ReplyAction="http://tempuri.org/IWorkspaceService/PerformTextualSearchResponse")]
        System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.BaseSearchResult[]> PerformTextualSearchAsync(byte[] stream);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWorkspaceServiceChannel : GPAS.Workspace.ServiceAccess.RemoteService.IWorkspaceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkspaceServiceClient : System.ServiceModel.ClientBase<GPAS.Workspace.ServiceAccess.RemoteService.IWorkspaceService>, GPAS.Workspace.ServiceAccess.RemoteService.IWorkspaceService {
        
        public WorkspaceServiceClient() {
        }
        
        public WorkspaceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WorkspaceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkspaceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkspaceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GPAS.Dispatch.Entities.Concepts.KObject[] GetObjectListById(long[] dbObjectIDs) {
            return base.Channel.GetObjectListById(dbObjectIDs);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> GetObjectListByIdAsync(long[] dbObjectIDs) {
            return base.Channel.GetObjectListByIdAsync(dbObjectIDs);
        }
        
        public GPAS.Dispatch.Entities.Concepts.KProperty[] GetPropertyForObject(GPAS.Dispatch.Entities.Concepts.KObject kObject) {
            return base.Channel.GetPropertyForObject(kObject);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KProperty[]> GetPropertyForObjectAsync(GPAS.Dispatch.Entities.Concepts.KObject kObject) {
            return base.Channel.GetPropertyForObjectAsync(kObject);
        }
        
        public GPAS.Dispatch.Entities.Concepts.KProperty[] GetPropertyForObjects(long[] dbObjIDs) {
            return base.Channel.GetPropertyForObjects(dbObjIDs);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KProperty[]> GetPropertyForObjectsAsync(long[] dbObjIDs) {
            return base.Channel.GetPropertyForObjectsAsync(dbObjIDs);
        }
        
        public GPAS.Dispatch.Entities.Concepts.KProperty[] GetPropertyListById(long[] dbOPropertyIDs) {
            return base.Channel.GetPropertyListById(dbOPropertyIDs);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KProperty[]> GetPropertyListByIdAsync(long[] dbOPropertyIDs) {
            return base.Channel.GetPropertyListByIdAsync(dbOPropertyIDs);
        }
        
        public GPAS.Dispatch.Entities.Concepts.KProperty[] GetSpecifiedPropertiesOfObjectsByTypes(long[] objectsId, string[] propertiesType) {
            return base.Channel.GetSpecifiedPropertiesOfObjectsByTypes(objectsId, propertiesType);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KProperty[]> GetSpecifiedPropertiesOfObjectsByTypesAsync(long[] objectsId, string[] propertiesType) {
            return base.Channel.GetSpecifiedPropertiesOfObjectsByTypesAsync(objectsId, propertiesType);
        }
        
        public GPAS.Dispatch.Entities.Concepts.KProperty[] GetSpecifiedPropertiesOfObjectsByTypeAndValue(long[] objectIDs, string propertiesTypeUri, string propertiesValue) {
            return base.Channel.GetSpecifiedPropertiesOfObjectsByTypeAndValue(objectIDs, propertiesTypeUri, propertiesValue);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KProperty[]> GetSpecifiedPropertiesOfObjectsByTypeAndValueAsync(long[] objectIDs, string propertiesTypeUri, string propertiesValue) {
            return base.Channel.GetSpecifiedPropertiesOfObjectsByTypeAndValueAsync(objectIDs, propertiesTypeUri, propertiesValue);
        }
        
        public GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[] GetLinksSourcedByObject(GPAS.Dispatch.Entities.Concepts.KObject kObject, string relationshipTypeURI) {
            return base.Channel.GetLinksSourcedByObject(kObject, relationshipTypeURI);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[]> GetLinksSourcedByObjectAsync(GPAS.Dispatch.Entities.Concepts.KObject kObject, string relationshipTypeURI) {
            return base.Channel.GetLinksSourcedByObjectAsync(kObject, relationshipTypeURI);
        }
        
        public GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[] GetRelationshipListById(long[] dbRelationshipIDs) {
            return base.Channel.GetRelationshipListById(dbRelationshipIDs);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[]> GetRelationshipListByIdAsync(long[] dbRelationshipIDs) {
            return base.Channel.GetRelationshipListByIdAsync(dbRelationshipIDs);
        }
        
        public GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[] GetRelationshipsBySourceObject(long objectID, string typeURI) {
            return base.Channel.GetRelationshipsBySourceObject(objectID, typeURI);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[]> GetRelationshipsBySourceObjectAsync(long objectID, string typeURI) {
            return base.Channel.GetRelationshipsBySourceObjectAsync(objectID, typeURI);
        }
        
        public GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink GetExistingRelationship(string typeURI, long source, long target, GPAS.Dispatch.Entities.Concepts.LinkDirection direction) {
            return base.Channel.GetExistingRelationship(typeURI, source, target, direction);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink> GetExistingRelationshipAsync(string typeURI, long source, long target, GPAS.Dispatch.Entities.Concepts.LinkDirection direction) {
            return base.Channel.GetExistingRelationshipAsync(typeURI, source, target, direction);
        }
        
        public GPAS.Dispatch.Entities.Concepts.KMedia[] GetMediaUrisForObject(long objectID) {
            return base.Channel.GetMediaUrisForObject(objectID);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KMedia[]> GetMediaUrisForObjectAsync(long objectID) {
            return base.Channel.GetMediaUrisForObjectAsync(objectID);
        }
        
        public GPAS.Workspace.ServiceAccess.RemoteService.KGraphArrangement[] GetPublishedGraphs() {
            return base.Channel.GetPublishedGraphs();
        }
        
        public System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.KGraphArrangement[]> GetPublishedGraphsAsync() {
            return base.Channel.GetPublishedGraphsAsync();
        }
        
        public byte[] GetPublishedGraphImage(int kGraphArrangementID) {
            return base.Channel.GetPublishedGraphImage(kGraphArrangementID);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPublishedGraphImageAsync(int kGraphArrangementID) {
            return base.Channel.GetPublishedGraphImageAsync(kGraphArrangementID);
        }
        
        public byte[] GetPublishedGraph(int kGraphArrangementID) {
            return base.Channel.GetPublishedGraph(kGraphArrangementID);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPublishedGraphAsync(int kGraphArrangementID) {
            return base.Channel.GetPublishedGraphAsync(kGraphArrangementID);
        }
        
        public GPAS.Dispatch.Entities.Concepts.KObject[] QuickSearch(string keyword) {
            return base.Channel.QuickSearch(keyword);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> QuickSearchAsync(string keyword) {
            return base.Channel.QuickSearchAsync(keyword);
        }
        
        public GPAS.Dispatch.Entities.Concepts.KObject[] PerformFilterSearch(byte[] stream, System.Nullable<int> count) {
            return base.Channel.PerformFilterSearch(stream, count);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> PerformFilterSearchAsync(byte[] stream, System.Nullable<int> count) {
            return base.Channel.PerformFilterSearchAsync(stream, count);
        }
        
        public long[] PerformSelectMatching(byte[] stream, long[] ObjectIDs) {
            return base.Channel.PerformSelectMatching(stream, ObjectIDs);
        }
        
        public System.Threading.Tasks.Task<long[]> PerformSelectMatchingAsync(byte[] stream, long[] ObjectIDs) {
            return base.Channel.PerformSelectMatchingAsync(stream, ObjectIDs);
        }
        
        public GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResult FindRelatedEntities(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold) {
            return base.Channel.FindRelatedEntities(searchedVertices, totalResultsThreshold);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResult> FindRelatedEntitiesAsync(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold) {
            return base.Channel.FindRelatedEntitiesAsync(searchedVertices, totalResultsThreshold);
        }
        
        public GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResult FindRelatedDocuments(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold) {
            return base.Channel.FindRelatedDocuments(searchedVertices, totalResultsThreshold);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResult> FindRelatedDocumentsAsync(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold) {
            return base.Channel.FindRelatedDocumentsAsync(searchedVertices, totalResultsThreshold);
        }
        
        public GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResult FindRelatedEvents(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold) {
            return base.Channel.FindRelatedEvents(searchedVertices, totalResultsThreshold);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResult> FindRelatedEventsAsync(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold) {
            return base.Channel.FindRelatedEventsAsync(searchedVertices, totalResultsThreshold);
        }
        
        public GPAS.Dispatch.Entities.Concepts.SearchAroundResult.EventBasedResult FindRelatedEntitiesAppearedInEvents(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold) {
            return base.Channel.FindRelatedEntitiesAppearedInEvents(searchedVertices, totalResultsThreshold);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.EventBasedResult> FindRelatedEntitiesAppearedInEventsAsync(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, int totalResultsThreshold) {
            return base.Channel.FindRelatedEntitiesAppearedInEventsAsync(searchedVertices, totalResultsThreshold);
        }
        
        public GPAS.Dispatch.Entities.Concepts.SearchAroundResult.PropertyBasedResult FindPropertiesSameWith(GPAS.Dispatch.Entities.Concepts.KProperty[] properties, int loadNResults, int totalResultsThreshold) {
            return base.Channel.FindPropertiesSameWith(properties, loadNResults, totalResultsThreshold);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.PropertyBasedResult> FindPropertiesSameWithAsync(GPAS.Dispatch.Entities.Concepts.KProperty[] properties, int loadNResults, int totalResultsThreshold) {
            return base.Channel.FindPropertiesSameWithAsync(properties, loadNResults, totalResultsThreshold);
        }
        
        public GPAS.SearchAround.CustomSearchAroundResult PerformCustomSearchAround(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, byte[] serializedCustomSearchAroundCriteria, int totalResultsThreshold) {
            return base.Channel.PerformCustomSearchAround(searchedVertices, serializedCustomSearchAroundCriteria, totalResultsThreshold);
        }
        
        public System.Threading.Tasks.Task<GPAS.SearchAround.CustomSearchAroundResult> PerformCustomSearchAroundAsync(System.Collections.Generic.Dictionary<string, long[]> searchedVertices, byte[] serializedCustomSearchAroundCriteria, int totalResultsThreshold) {
            return base.Channel.PerformCustomSearchAroundAsync(searchedVertices, serializedCustomSearchAroundCriteria, totalResultsThreshold);
        }
        
        public GPAS.Dispatch.Entities.Concepts.KObject[] PerformGeoCircleSearch(GPAS.GeoSearch.CircleSearchCriteria circleSearchCriteria, int maxResult) {
            return base.Channel.PerformGeoCircleSearch(circleSearchCriteria, maxResult);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> PerformGeoCircleSearchAsync(GPAS.GeoSearch.CircleSearchCriteria circleSearchCriteria, int maxResult) {
            return base.Channel.PerformGeoCircleSearchAsync(circleSearchCriteria, maxResult);
        }
        
        public GPAS.Dispatch.Entities.Concepts.KObject[] PerformGeoPolygonSearch(GPAS.GeoSearch.PolygonSearchCriteria polygonSearchCriteria, int maxResult) {
            return base.Channel.PerformGeoPolygonSearch(polygonSearchCriteria, maxResult);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> PerformGeoPolygonSearchAsync(GPAS.GeoSearch.PolygonSearchCriteria polygonSearchCriteria, int maxResult) {
            return base.Channel.PerformGeoPolygonSearchAsync(polygonSearchCriteria, maxResult);
        }
        
        public GPAS.Dispatch.Entities.Concepts.KObject[] PerformGeoCircleFilterSearch(GPAS.GeoSearch.CircleSearchCriteria circleSearchCriteria, GPAS.Workspace.ServiceAccess.RemoteService.CriteriaSet filterSearchCriteria, int maxResult) {
            return base.Channel.PerformGeoCircleFilterSearch(circleSearchCriteria, filterSearchCriteria, maxResult);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> PerformGeoCircleFilterSearchAsync(GPAS.GeoSearch.CircleSearchCriteria circleSearchCriteria, GPAS.Workspace.ServiceAccess.RemoteService.CriteriaSet filterSearchCriteria, int maxResult) {
            return base.Channel.PerformGeoCircleFilterSearchAsync(circleSearchCriteria, filterSearchCriteria, maxResult);
        }
        
        public GPAS.Dispatch.Entities.Concepts.KObject[] PerformGeoPolygonFilterSearch(GPAS.GeoSearch.PolygonSearchCriteria polygonSearchCriteria, GPAS.Workspace.ServiceAccess.RemoteService.CriteriaSet filterSearchCriteria, int maxResult) {
            return base.Channel.PerformGeoPolygonFilterSearch(polygonSearchCriteria, filterSearchCriteria, maxResult);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> PerformGeoPolygonFilterSearchAsync(GPAS.GeoSearch.PolygonSearchCriteria polygonSearchCriteria, GPAS.Workspace.ServiceAccess.RemoteService.CriteriaSet filterSearchCriteria, int maxResult) {
            return base.Channel.PerformGeoPolygonFilterSearchAsync(polygonSearchCriteria, filterSearchCriteria, maxResult);
        }
        
        public GPAS.Dispatch.Entities.Publish.PublishResult Publish(GPAS.Dispatch.Entities.Publish.AddedConcepts addedConcept, GPAS.Dispatch.Entities.Publish.ModifiedConcepts modifiedConcept, long dataSourceID, bool isContinousPublish) {
            return base.Channel.Publish(addedConcept, modifiedConcept, dataSourceID, isContinousPublish);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Publish.PublishResult> PublishAsync(GPAS.Dispatch.Entities.Publish.AddedConcepts addedConcept, GPAS.Dispatch.Entities.Publish.ModifiedConcepts modifiedConcept, long dataSourceID, bool isContinousPublish) {
            return base.Channel.PublishAsync(addedConcept, modifiedConcept, dataSourceID, isContinousPublish);
        }
        
        public void FinalizeContinousPublish() {
            base.Channel.FinalizeContinousPublish();
        }
        
        public System.Threading.Tasks.Task FinalizeContinousPublishAsync() {
            return base.Channel.FinalizeContinousPublishAsync();
        }
        
        public bool CanPerformNewPublish() {
            return base.Channel.CanPerformNewPublish();
        }
        
        public System.Threading.Tasks.Task<bool> CanPerformNewPublishAsync() {
            return base.Channel.CanPerformNewPublishAsync();
        }
        
        public void RegisterNewDataSourceToRepositoryServer(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description) {
            base.Channel.RegisterNewDataSourceToRepositoryServer(dsId, name, type, acl, description);
        }
        
        public System.Threading.Tasks.Task RegisterNewDataSourceToRepositoryServerAsync(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description) {
            return base.Channel.RegisterNewDataSourceToRepositoryServerAsync(dsId, name, type, acl, description);
        }
        
        public void SynchronizeNewDataSourceInSearchServer(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description) {
            base.Channel.SynchronizeNewDataSourceInSearchServer(dsId, name, type, acl, description);
        }
        
        public System.Threading.Tasks.Task SynchronizeNewDataSourceInSearchServerAsync(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description) {
            return base.Channel.SynchronizeNewDataSourceInSearchServerAsync(dsId, name, type, acl, description);
        }
        
        public GPAS.Workspace.ServiceAccess.RemoteService.KGraphArrangement PublishGraph(long id, string title, string description, byte[] GraphImage, byte[] GraphArrangement, int nodesCount, string timeCreated, long dataSourceID) {
            return base.Channel.PublishGraph(id, title, description, GraphImage, GraphArrangement, nodesCount, timeCreated, dataSourceID);
        }
        
        public System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.KGraphArrangement> PublishGraphAsync(long id, string title, string description, byte[] GraphImage, byte[] GraphArrangement, int nodesCount, string timeCreated, long dataSourceID) {
            return base.Channel.PublishGraphAsync(id, title, description, GraphImage, GraphArrangement, nodesCount, timeCreated, dataSourceID);
        }
        
        public bool DeletePublishedGraph(int graphID) {
            return base.Channel.DeletePublishedGraph(graphID);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePublishedGraphAsync(int graphID) {
            return base.Channel.DeletePublishedGraphAsync(graphID);
        }
        
        public long GetNewObjectId() {
            return base.Channel.GetNewObjectId();
        }
        
        public System.Threading.Tasks.Task<long> GetNewObjectIdAsync() {
            return base.Channel.GetNewObjectIdAsync();
        }
        
        public long GetNewObjectIdRange(long count) {
            return base.Channel.GetNewObjectIdRange(count);
        }
        
        public System.Threading.Tasks.Task<long> GetNewObjectIdRangeAsync(long count) {
            return base.Channel.GetNewObjectIdRangeAsync(count);
        }
        
        public long GetNewPropertyId() {
            return base.Channel.GetNewPropertyId();
        }
        
        public System.Threading.Tasks.Task<long> GetNewPropertyIdAsync() {
            return base.Channel.GetNewPropertyIdAsync();
        }
        
        public long GetNewPropertyIdRange(long count) {
            return base.Channel.GetNewPropertyIdRange(count);
        }
        
        public System.Threading.Tasks.Task<long> GetNewPropertyIdRangeAsync(long count) {
            return base.Channel.GetNewPropertyIdRangeAsync(count);
        }
        
        public long GetNewRelationId() {
            return base.Channel.GetNewRelationId();
        }
        
        public System.Threading.Tasks.Task<long> GetNewRelationIdAsync() {
            return base.Channel.GetNewRelationIdAsync();
        }
        
        public long GetNewRelationIdRange(long count) {
            return base.Channel.GetNewRelationIdRange(count);
        }
        
        public System.Threading.Tasks.Task<long> GetNewRelationIdRangeAsync(long count) {
            return base.Channel.GetNewRelationIdRangeAsync(count);
        }
        
        public long GetNewMediaId() {
            return base.Channel.GetNewMediaId();
        }
        
        public System.Threading.Tasks.Task<long> GetNewMediaIdAsync() {
            return base.Channel.GetNewMediaIdAsync();
        }
        
        public long GetNewMediaIdRange(long count) {
            return base.Channel.GetNewMediaIdRange(count);
        }
        
        public System.Threading.Tasks.Task<long> GetNewMediaIdRangeAsync(long count) {
            return base.Channel.GetNewMediaIdRangeAsync(count);
        }
        
        public long GetNewGraphId() {
            return base.Channel.GetNewGraphId();
        }
        
        public System.Threading.Tasks.Task<long> GetNewGraphIdAsync() {
            return base.Channel.GetNewGraphIdAsync();
        }
        
        public long GetNewInvestigationId() {
            return base.Channel.GetNewInvestigationId();
        }
        
        public System.Threading.Tasks.Task<long> GetNewInvestigationIdAsync() {
            return base.Channel.GetNewInvestigationIdAsync();
        }
        
        public long GetNewDataSourceId() {
            return base.Channel.GetNewDataSourceId();
        }
        
        public System.Threading.Tasks.Task<long> GetNewDataSourceIdAsync() {
            return base.Channel.GetNewDataSourceIdAsync();
        }
        
        public void RegisterNewImportRequests(GPAS.Workspace.ServiceAccess.RemoteService.SemiStructuredDataImportRequestMetadata[] requestsData) {
            base.Channel.RegisterNewImportRequests(requestsData);
        }
        
        public System.Threading.Tasks.Task RegisterNewImportRequestsAsync(GPAS.Workspace.ServiceAccess.RemoteService.SemiStructuredDataImportRequestMetadata[] requestsData) {
            return base.Channel.RegisterNewImportRequestsAsync(requestsData);
        }
        
        public GPAS.Workspace.ServiceAccess.RemoteService.JobRequest[] GetJobRequests() {
            return base.Channel.GetJobRequests();
        }
        
        public System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.JobRequest[]> GetJobRequestsAsync() {
            return base.Channel.GetJobRequestsAsync();
        }
        
        public string[] GetUriOfDatabasesForImport() {
            return base.Channel.GetUriOfDatabasesForImport();
        }
        
        public System.Threading.Tasks.Task<string[]> GetUriOfDatabasesForImportAsync() {
            return base.Channel.GetUriOfDatabasesForImportAsync();
        }
        
        public System.Data.DataSet GetTablesAndViewsOfDatabaseForImport(string dbForImportURI) {
            return base.Channel.GetTablesAndViewsOfDatabaseForImport(dbForImportURI);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTablesAndViewsOfDatabaseForImportAsync(string dbForImportURI) {
            return base.Channel.GetTablesAndViewsOfDatabaseForImportAsync(dbForImportURI);
        }
        
        public void StartStreamingIngestion(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion) {
            base.Channel.StartStreamingIngestion(streamingIngestion);
        }
        
        public System.Threading.Tasks.Task StartStreamingIngestionAsync(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion) {
            return base.Channel.StartStreamingIngestionAsync(streamingIngestion);
        }
        
        public void StopStreamingIngestion(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion) {
            base.Channel.StopStreamingIngestion(streamingIngestion);
        }
        
        public System.Threading.Tasks.Task StopStreamingIngestionAsync(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion) {
            return base.Channel.StopStreamingIngestionAsync(streamingIngestion);
        }
        
        public string[] GetJobsStatus() {
            return base.Channel.GetJobsStatus();
        }
        
        public System.Threading.Tasks.Task<string[]> GetJobsStatusAsync() {
            return base.Channel.GetJobsStatusAsync();
        }
        
        public string[] GetStreamJobsStatus() {
            return base.Channel.GetStreamJobsStatus();
        }
        
        public System.Threading.Tasks.Task<string[]> GetStreamJobsStatusAsync() {
            return base.Channel.GetStreamJobsStatusAsync();
        }
        
        public string[] GetPreviewDataFromDatalake(string category, string dateTime) {
            return base.Channel.GetPreviewDataFromDatalake(category, dateTime);
        }
        
        public System.Threading.Tasks.Task<string[]> GetPreviewDataFromDatalakeAsync(string category, string dateTime) {
            return base.Channel.GetPreviewDataFromDatalakeAsync(category, dateTime);
        }
        
        public string[] GetDatalakeSlice(string category, string dateTime, GPAS.Workspace.ServiceAccess.RemoteService.SearchCriteria[] searchCriterias) {
            return base.Channel.GetDatalakeSlice(category, dateTime, searchCriterias);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDatalakeSliceAsync(string category, string dateTime, GPAS.Workspace.ServiceAccess.RemoteService.SearchCriteria[] searchCriterias) {
            return base.Channel.GetDatalakeSliceAsync(category, dateTime, searchCriterias);
        }
        
        public string[] GetDatalakeCategories(string path) {
            return base.Channel.GetDatalakeCategories(path);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDatalakeCategoriesAsync(string path) {
            return base.Channel.GetDatalakeCategoriesAsync(path);
        }
        
        public string[] GetDatalakeSliceHeaders(string category, string dateTime) {
            return base.Channel.GetDatalakeSliceHeaders(category, dateTime);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDatalakeSliceHeadersAsync(string category, string dateTime) {
            return base.Channel.GetDatalakeSliceHeadersAsync(category, dateTime);
        }
        
        public void InsertFileIngestionJobStatus(GPAS.Workspace.ServiceAccess.RemoteService.IngestionFile ingestionFile) {
            base.Channel.InsertFileIngestionJobStatus(ingestionFile);
        }
        
        public System.Threading.Tasks.Task InsertFileIngestionJobStatusAsync(GPAS.Workspace.ServiceAccess.RemoteService.IngestionFile ingestionFile) {
            return base.Channel.InsertFileIngestionJobStatusAsync(ingestionFile);
        }
        
        public void InsertStreamIngestionStartStatus(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion) {
            base.Channel.InsertStreamIngestionStartStatus(streamingIngestion);
        }
        
        public System.Threading.Tasks.Task InsertStreamIngestionStartStatusAsync(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion) {
            return base.Channel.InsertStreamIngestionStartStatusAsync(streamingIngestion);
        }
        
        public void InsertStreamIngestionStopStatus(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion) {
            base.Channel.InsertStreamIngestionStopStatus(streamingIngestion);
        }
        
        public System.Threading.Tasks.Task InsertStreamIngestionStopStatusAsync(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion) {
            return base.Channel.InsertStreamIngestionStopStatusAsync(streamingIngestion);
        }
        
        public bool IsListenProcessorExist(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion) {
            return base.Channel.IsListenProcessorExist(streamingIngestion);
        }
        
        public System.Threading.Tasks.Task<bool> IsListenProcessorExistAsync(GPAS.Workspace.ServiceAccess.RemoteService.StreamingIngestion streamingIngestion) {
            return base.Channel.IsListenProcessorExistAsync(streamingIngestion);
        }
        
        public bool Authenticate(string userName, string password) {
            return base.Channel.Authenticate(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticateAsync(string userName, string password) {
            return base.Channel.AuthenticateAsync(userName, password);
        }
        
        public string GetDispatchCurrentDateTime() {
            return base.Channel.GetDispatchCurrentDateTime();
        }
        
        public System.Threading.Tasks.Task<string> GetDispatchCurrentDateTimeAsync() {
            return base.Channel.GetDispatchCurrentDateTimeAsync();
        }
        
        public GPAS.AccessControl.Groups.GroupInfo[] GetGroups() {
            return base.Channel.GetGroups();
        }
        
        public System.Threading.Tasks.Task<GPAS.AccessControl.Groups.GroupInfo[]> GetGroupsAsync() {
            return base.Channel.GetGroupsAsync();
        }
        
        public GPAS.AccessControl.GroupClassificationBasedPermission[] GetClassificationBasedPermissionForGroups(string[] groupNames) {
            return base.Channel.GetClassificationBasedPermissionForGroups(groupNames);
        }
        
        public System.Threading.Tasks.Task<GPAS.AccessControl.GroupClassificationBasedPermission[]> GetClassificationBasedPermissionForGroupsAsync(string[] groupNames) {
            return base.Channel.GetClassificationBasedPermissionForGroupsAsync(groupNames);
        }
        
        public string[] GetGroupsOfUser(string username) {
            return base.Channel.GetGroupsOfUser(username);
        }
        
        public System.Threading.Tasks.Task<string[]> GetGroupsOfUserAsync(string username) {
            return base.Channel.GetGroupsOfUserAsync(username);
        }
        
        public GPAS.Workspace.ServiceAccess.RemoteService.DataSourceACL[] GetDataSourceACL(long[] dataSourceIDs) {
            return base.Channel.GetDataSourceACL(dataSourceIDs);
        }
        
        public System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.DataSourceACL[]> GetDataSourceACLAsync(long[] dataSourceIDs) {
            return base.Channel.GetDataSourceACLAsync(dataSourceIDs);
        }
        
        public System.Tuple<long[], long[]> GetReadableSubsetOfConcepts(long[] objIDs, long[] relationshipIDs, string[] groupNames) {
            return base.Channel.GetReadableSubsetOfConcepts(objIDs, relationshipIDs, groupNames);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<long[], long[]>> GetReadableSubsetOfConceptsAsync(long[] objIDs, long[] relationshipIDs, string[] groupNames) {
            return base.Channel.GetReadableSubsetOfConceptsAsync(objIDs, relationshipIDs, groupNames);
        }
        
        public GPAS.Workspace.ServiceAccess.RemoteService.DirectoryContent[] GetMediaPathContent(string path) {
            return base.Channel.GetMediaPathContent(path);
        }
        
        public System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.DirectoryContent[]> GetMediaPathContentAsync(string path) {
            return base.Channel.GetMediaPathContentAsync(path);
        }
        
        public bool DeleteMediaDirectory(string path) {
            return base.Channel.DeleteMediaDirectory(path);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMediaDirectoryAsync(string path) {
            return base.Channel.DeleteMediaDirectoryAsync(path);
        }
        
        public bool CreateMediaDirectory(string path) {
            return base.Channel.CreateMediaDirectory(path);
        }
        
        public System.Threading.Tasks.Task<bool> CreateMediaDirectoryAsync(string path) {
            return base.Channel.CreateMediaDirectoryAsync(path);
        }
        
        public bool RenameMediaDirectory(string sourcePath, string targetPath) {
            return base.Channel.RenameMediaDirectory(sourcePath, targetPath);
        }
        
        public System.Threading.Tasks.Task<bool> RenameMediaDirectoryAsync(string sourcePath, string targetPath) {
            return base.Channel.RenameMediaDirectoryAsync(sourcePath, targetPath);
        }
        
        public byte[] DownloadMediaFile(string filePath) {
            return base.Channel.DownloadMediaFile(filePath);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadMediaFileAsync(string filePath) {
            return base.Channel.DownloadMediaFileAsync(filePath);
        }
        
        public bool UploadMediaFile(byte[] fileToUpload, string fileName, string targetPath) {
            return base.Channel.UploadMediaFile(fileToUpload, fileName, targetPath);
        }
        
        public System.Threading.Tasks.Task<bool> UploadMediaFileAsync(byte[] fileToUpload, string fileName, string targetPath) {
            return base.Channel.UploadMediaFileAsync(fileToUpload, fileName, targetPath);
        }
        
        public void UploadDataSourceFileByName(string docName, byte[] docContent) {
            base.Channel.UploadDataSourceFileByName(docName, docContent);
        }
        
        public System.Threading.Tasks.Task UploadDataSourceFileByNameAsync(string docName, byte[] docContent) {
            return base.Channel.UploadDataSourceFileByNameAsync(docName, docContent);
        }
        
        public void UploadDocumentFile(long docID, byte[] docContent) {
            base.Channel.UploadDocumentFile(docID, docContent);
        }
        
        public System.Threading.Tasks.Task UploadDocumentFileAsync(long docID, byte[] docContent) {
            return base.Channel.UploadDocumentFileAsync(docID, docContent);
        }
        
        public void UploadDataSourceFile(long dataSourceID, byte[] dataSourceContent) {
            base.Channel.UploadDataSourceFile(dataSourceID, dataSourceContent);
        }
        
        public System.Threading.Tasks.Task UploadDataSourceFileAsync(long dataSourceID, byte[] dataSourceContent) {
            return base.Channel.UploadDataSourceFileAsync(dataSourceID, dataSourceContent);
        }
        
        public void UploadFileAsDocumentAndDataSource(byte[] fileContent, long docID, long dataSourceID) {
            base.Channel.UploadFileAsDocumentAndDataSource(fileContent, docID, dataSourceID);
        }
        
        public System.Threading.Tasks.Task UploadFileAsDocumentAndDataSourceAsync(byte[] fileContent, long docID, long dataSourceID) {
            return base.Channel.UploadFileAsDocumentAndDataSourceAsync(fileContent, docID, dataSourceID);
        }
        
        public void UploadDocumentFromJobShare(long docID, string docJobSharePath) {
            base.Channel.UploadDocumentFromJobShare(docID, docJobSharePath);
        }
        
        public System.Threading.Tasks.Task UploadDocumentFromJobShareAsync(long docID, string docJobSharePath) {
            return base.Channel.UploadDocumentFromJobShareAsync(docID, docJobSharePath);
        }
        
        public void UploadDataSourceFromJobShare(long dataSourceID, string dataSourceJobSharePath) {
            base.Channel.UploadDataSourceFromJobShare(dataSourceID, dataSourceJobSharePath);
        }
        
        public System.Threading.Tasks.Task UploadDataSourceFromJobShareAsync(long dataSourceID, string dataSourceJobSharePath) {
            return base.Channel.UploadDataSourceFromJobShareAsync(dataSourceID, dataSourceJobSharePath);
        }
        
        public byte[] DownloadDocumentFile(long docID) {
            return base.Channel.DownloadDocumentFile(docID);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadDocumentFileAsync(long docID) {
            return base.Channel.DownloadDocumentFileAsync(docID);
        }
        
        public byte[] DownloadDataSourceFile(long dataSourceID) {
            return base.Channel.DownloadDataSourceFile(dataSourceID);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadDataSourceFileAsync(long dataSourceID) {
            return base.Channel.DownloadDataSourceFileAsync(dataSourceID);
        }
        
        public byte[] DownloadDataSourceFileByName(string dataSourceName) {
            return base.Channel.DownloadDataSourceFileByName(dataSourceName);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadDataSourceFileByNameAsync(string dataSourceName) {
            return base.Channel.DownloadDataSourceFileByNameAsync(dataSourceName);
        }
        
        public System.IO.Stream GetOntology() {
            return base.Channel.GetOntology();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetOntologyAsync() {
            return base.Channel.GetOntologyAsync();
        }
        
        public System.IO.Stream GetIcon() {
            return base.Channel.GetIcon();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetIconAsync() {
            return base.Channel.GetIconAsync();
        }
        
        public void UpdateOntologyFile(System.IO.Stream reader) {
            base.Channel.UpdateOntologyFile(reader);
        }
        
        public System.Threading.Tasks.Task UpdateOntologyFileAsync(System.IO.Stream reader) {
            return base.Channel.UpdateOntologyFileAsync(reader);
        }
        
        public byte[] GetMapTileImage(string tileSource, int zoomLevel, long x, long y) {
            return base.Channel.GetMapTileImage(tileSource, zoomLevel, x, y);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetMapTileImageAsync(string tileSource, int zoomLevel, long x, long y) {
            return base.Channel.GetMapTileImageAsync(tileSource, zoomLevel, x, y);
        }
        
        public GPAS.Workspace.ServiceAccess.RemoteService.GeographicalLocationModel GetGeoLocationBaseOnIP(string ip) {
            return base.Channel.GetGeoLocationBaseOnIP(ip);
        }
        
        public System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.GeographicalLocationModel> GetGeoLocationBaseOnIPAsync(string ip) {
            return base.Channel.GetGeoLocationBaseOnIPAsync(ip);
        }
        
        public bool InsertGeoSpecialInformationBasedOnIP(string ip, double latitude, double longitude) {
            return base.Channel.InsertGeoSpecialInformationBasedOnIP(ip, latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<bool> InsertGeoSpecialInformationBasedOnIPAsync(string ip, double latitude, double longitude) {
            return base.Channel.InsertGeoSpecialInformationBasedOnIPAsync(ip, latitude, longitude);
        }
        
        public string[] GetMapTileSources() {
            return base.Channel.GetMapTileSources();
        }
        
        public System.Threading.Tasks.Task<string[]> GetMapTileSourcesAsync() {
            return base.Channel.GetMapTileSourcesAsync();
        }
        
        public string GetDocumentPlaneText(long docID) {
            return base.Channel.GetDocumentPlaneText(docID);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentPlaneTextAsync(long docID) {
            return base.Channel.GetDocumentPlaneTextAsync(docID);
        }
        
        public GPAS.Dispatch.Entities.NLP.DetectedLanguage[] DetectLanguage(string content) {
            return base.Channel.DetectLanguage(content);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.NLP.DetectedLanguage[]> DetectLanguageAsync(string content) {
            return base.Channel.DetectLanguageAsync(content);
        }
        
        public GPAS.Dispatch.Entities.NLP.TagCloudKeyPhrase[] GetTagCloud(string content) {
            return base.Channel.GetTagCloud(content);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.NLP.TagCloudKeyPhrase[]> GetTagCloudAsync(string content) {
            return base.Channel.GetTagCloudAsync(content);
        }
        
        public GPAS.Dispatch.Entities.NLP.TagCloudKeyPhrase[] GetLanguageTagCloud(string content, GPAS.Dispatch.Entities.NLP.Language language) {
            return base.Channel.GetLanguageTagCloud(content, language);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.NLP.TagCloudKeyPhrase[]> GetLanguageTagCloudAsync(string content, GPAS.Dispatch.Entities.NLP.Language language) {
            return base.Channel.GetLanguageTagCloudAsync(content, language);
        }
        
        public string[] GetSummarize(GPAS.Dispatch.Entities.NLP.SummarizationRequest summarizationRequest) {
            return base.Channel.GetSummarize(summarizationRequest);
        }
        
        public System.Threading.Tasks.Task<string[]> GetSummarizeAsync(GPAS.Dispatch.Entities.NLP.SummarizationRequest summarizationRequest) {
            return base.Channel.GetSummarizeAsync(summarizationRequest);
        }
        
        public string[] GetLanguageSummarize(GPAS.Dispatch.Entities.NLP.SummarizationRequest summarizationRequest, GPAS.Dispatch.Entities.NLP.Language lang) {
            return base.Channel.GetLanguageSummarize(summarizationRequest, lang);
        }
        
        public System.Threading.Tasks.Task<string[]> GetLanguageSummarizeAsync(GPAS.Dispatch.Entities.NLP.SummarizationRequest summarizationRequest, GPAS.Dispatch.Entities.NLP.Language lang) {
            return base.Channel.GetLanguageSummarizeAsync(summarizationRequest, lang);
        }
        
        public bool IsNLPServiceInstalled() {
            return base.Channel.IsNLPServiceInstalled();
        }
        
        public System.Threading.Tasks.Task<bool> IsNLPServiceInstalledAsync() {
            return base.Channel.IsNLPServiceInstalledAsync();
        }
        
        public GPAS.AccessControl.DataSourceInfo[] GetDataSources(long dataSourceType, int star, string filter) {
            return base.Channel.GetDataSources(dataSourceType, star, filter);
        }
        
        public System.Threading.Tasks.Task<GPAS.AccessControl.DataSourceInfo[]> GetDataSourcesAsync(long dataSourceType, int star, string filter) {
            return base.Channel.GetDataSourcesAsync(dataSourceType, star, filter);
        }
        
        public GPAS.AccessControl.DataSourceInfo[] GetAllDataSources(string filter) {
            return base.Channel.GetAllDataSources(filter);
        }
        
        public System.Threading.Tasks.Task<GPAS.AccessControl.DataSourceInfo[]> GetAllDataSourcesAsync(string filter) {
            return base.Channel.GetAllDataSourcesAsync(filter);
        }
        
        public GPAS.Dispatch.Entities.Concepts.ImageProcessing.BoundingBox[] FaceDetection(byte[] imageFile, string extention) {
            return base.Channel.FaceDetection(imageFile, extention);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.ImageProcessing.BoundingBox[]> FaceDetectionAsync(byte[] imageFile, string extention) {
            return base.Channel.FaceDetectionAsync(imageFile, extention);
        }
        
        public GPAS.Dispatch.Entities.Concepts.ImageProcessing.RetrievedFaceKObject[] FaceRecognition(byte[] imageFile, string extention, GPAS.Dispatch.Entities.Concepts.ImageProcessing.BoundingBox[] boundingBoxs, int count) {
            return base.Channel.FaceRecognition(imageFile, extention, boundingBoxs, count);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.ImageProcessing.RetrievedFaceKObject[]> FaceRecognitionAsync(byte[] imageFile, string extention, GPAS.Dispatch.Entities.Concepts.ImageProcessing.BoundingBox[] boundingBoxs, int count) {
            return base.Channel.FaceRecognitionAsync(imageFile, extention, boundingBoxs, count);
        }
        
        public bool IsMachneVisonServiceInstalled() {
            return base.Channel.IsMachneVisonServiceInstalled();
        }
        
        public System.Threading.Tasks.Task<bool> IsMachneVisonServiceInstalledAsync() {
            return base.Channel.IsMachneVisonServiceInstalledAsync();
        }
        
        public GPAS.StatisticalQuery.QueryResult RunStatisticalQuery(byte[] queryByteArray) {
            return base.Channel.RunStatisticalQuery(queryByteArray);
        }
        
        public System.Threading.Tasks.Task<GPAS.StatisticalQuery.QueryResult> RunStatisticalQueryAsync(byte[] queryByteArray) {
            return base.Channel.RunStatisticalQueryAsync(queryByteArray);
        }
        
        public long[] RetrieveObjectIDsByStatisticalQuery(byte[] queryByteArray, int PassObjectsCountLimit) {
            return base.Channel.RetrieveObjectIDsByStatisticalQuery(queryByteArray, PassObjectsCountLimit);
        }
        
        public System.Threading.Tasks.Task<long[]> RetrieveObjectIDsByStatisticalQueryAsync(byte[] queryByteArray, int PassObjectsCountLimit) {
            return base.Channel.RetrieveObjectIDsByStatisticalQueryAsync(queryByteArray, PassObjectsCountLimit);
        }
        
        public GPAS.StatisticalQuery.PropertyValueStatistics RetrievePropertyValueStatistics(byte[] statQueryByteArray, string exploredPropertyTypeUri, int startOffset, int resultsLimit, long minimumCount) {
            return base.Channel.RetrievePropertyValueStatistics(statQueryByteArray, exploredPropertyTypeUri, startOffset, resultsLimit, minimumCount);
        }
        
        public System.Threading.Tasks.Task<GPAS.StatisticalQuery.PropertyValueStatistics> RetrievePropertyValueStatisticsAsync(byte[] statQueryByteArray, string exploredPropertyTypeUri, int startOffset, int resultsLimit, long minimumCount) {
            return base.Channel.RetrievePropertyValueStatisticsAsync(statQueryByteArray, exploredPropertyTypeUri, startOffset, resultsLimit, minimumCount);
        }
        
        public GPAS.StatisticalQuery.ResultNode.PropertyBarValues RetrievePropertyBarValuesStatistics(byte[] queryByteArray, string exploredPropertyTypeUri, long bucketCount, double minValue, double maxValue) {
            return base.Channel.RetrievePropertyBarValuesStatistics(queryByteArray, exploredPropertyTypeUri, bucketCount, minValue, maxValue);
        }
        
        public System.Threading.Tasks.Task<GPAS.StatisticalQuery.ResultNode.PropertyBarValues> RetrievePropertyBarValuesStatisticsAsync(byte[] queryByteArray, string exploredPropertyTypeUri, long bucketCount, double minValue, double maxValue) {
            return base.Channel.RetrievePropertyBarValuesStatisticsAsync(queryByteArray, exploredPropertyTypeUri, bucketCount, minValue, maxValue);
        }
        
        public GPAS.StatisticalQuery.LinkTypeStatistics RetrieveLinkTypeStatistics(byte[] queryByteArray) {
            return base.Channel.RetrieveLinkTypeStatistics(queryByteArray);
        }
        
        public System.Threading.Tasks.Task<GPAS.StatisticalQuery.LinkTypeStatistics> RetrieveLinkTypeStatisticsAsync(byte[] queryByteArray) {
            return base.Channel.RetrieveLinkTypeStatisticsAsync(queryByteArray);
        }
        
        public long[] RetrieveLinkedObjectIDsByStatisticalQuery(byte[] queryByteArray, int PassObjectsCountLimit) {
            return base.Channel.RetrieveLinkedObjectIDsByStatisticalQuery(queryByteArray, PassObjectsCountLimit);
        }
        
        public System.Threading.Tasks.Task<long[]> RetrieveLinkedObjectIDsByStatisticalQueryAsync(byte[] queryByteArray, int PassObjectsCountLimit) {
            return base.Channel.RetrieveLinkedObjectIDsByStatisticalQueryAsync(queryByteArray, PassObjectsCountLimit);
        }
        
        public void SaveInvestigation(GPAS.Workspace.ServiceAccess.RemoteService.KInvestigation kInvestigation) {
            base.Channel.SaveInvestigation(kInvestigation);
        }
        
        public System.Threading.Tasks.Task SaveInvestigationAsync(GPAS.Workspace.ServiceAccess.RemoteService.KInvestigation kInvestigation) {
            return base.Channel.SaveInvestigationAsync(kInvestigation);
        }
        
        public GPAS.Workspace.ServiceAccess.RemoteService.InvestigationInfo[] GetSavedInvestigations() {
            return base.Channel.GetSavedInvestigations();
        }
        
        public System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.InvestigationInfo[]> GetSavedInvestigationsAsync() {
            return base.Channel.GetSavedInvestigationsAsync();
        }
        
        public byte[] GetSavedInvestigationImage(long id) {
            return base.Channel.GetSavedInvestigationImage(id);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetSavedInvestigationImageAsync(long id) {
            return base.Channel.GetSavedInvestigationImageAsync(id);
        }
        
        public byte[] GetSavedInvestigationStatus(long id) {
            return base.Channel.GetSavedInvestigationStatus(id);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetSavedInvestigationStatusAsync(long id) {
            return base.Channel.GetSavedInvestigationStatusAsync(id);
        }
        
        public long GetTimeLineMaxFrequecyCount(string[] propertiesTypeUri, string binLevel) {
            return base.Channel.GetTimeLineMaxFrequecyCount(propertiesTypeUri, binLevel);
        }
        
        public System.Threading.Tasks.Task<long> GetTimeLineMaxFrequecyCountAsync(string[] propertiesTypeUri, string binLevel) {
            return base.Channel.GetTimeLineMaxFrequecyCountAsync(propertiesTypeUri, binLevel);
        }
        
        public System.DateTime GetTimeLineMaxDate(string[] propertiesTypeUri, string binLevel) {
            return base.Channel.GetTimeLineMaxDate(propertiesTypeUri, binLevel);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetTimeLineMaxDateAsync(string[] propertiesTypeUri, string binLevel) {
            return base.Channel.GetTimeLineMaxDateAsync(propertiesTypeUri, binLevel);
        }
        
        public System.DateTime GetTimeLineMinDate(string[] propertiesTypeUri, string binLevel) {
            return base.Channel.GetTimeLineMinDate(propertiesTypeUri, binLevel);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetTimeLineMinDateAsync(string[] propertiesTypeUri, string binLevel) {
            return base.Channel.GetTimeLineMinDateAsync(propertiesTypeUri, binLevel);
        }
        
        public GPAS.Workspace.ServiceAccess.RemoteService.BaseSearchResult[] PerformTextualSearch(byte[] stream) {
            return base.Channel.PerformTextualSearch(stream);
        }
        
        public System.Threading.Tasks.Task<GPAS.Workspace.ServiceAccess.RemoteService.BaseSearchResult[]> PerformTextualSearchAsync(byte[] stream) {
            return base.Channel.PerformTextualSearchAsync(stream);
        }
    }
}
