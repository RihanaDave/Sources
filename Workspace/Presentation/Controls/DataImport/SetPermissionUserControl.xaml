<UserControl x:Class="GPAS.Workspace.Presentation.Controls.DataImport.SetPermissionUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:access="clr-namespace:GPAS.AccessControl;assembly=GPAS.AccessControl"
             xmlns:commonConverters="clr-namespace:GPAS.Workspace.Presentation.Controls.Common.Converters"
             xmlns:waiting="clr-namespace:GPAS.Workspace.Presentation.Controls.Waiting"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             Background="{DynamicResource MaterialDesignPaper}">

    <UserControl.Resources>
        <commonConverters:ValueEqualityWithParameterToBooleanConverter x:Key="EqualityWithParameterToBooleanConverter"/>
        <commonConverters:ImportStatusToIsEnableConverter x:Key="ImportStatusToIsEnableConverter"/>
    </UserControl.Resources>

    <Grid IsEnabled="{Binding Acl.OwnerDataSource.ImportStatus, Converter={StaticResource ImportStatusToIsEnableConverter}}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="3*"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="0" Text="Classification" Margin="10" Style="{StaticResource SecondHeader}"/>

            <ListView Grid.Row="1" Margin="10" ItemsSource="{Binding ClassificationCollection}">
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem" BasedOn="{StaticResource {x:Type ListViewItem}}">
                        <Setter Property="Focusable" Value="false"/>
                        <EventSetter Event="PreviewMouseDown" Handler="ListViewItem_MouseDown"/>
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <RadioButton IsEnabled="{Binding IsSelectable}" Content="{Binding Title}"
                                     IsChecked="{Binding IsSelected}" GroupName="Classification"/>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
        </Grid>

        <Separator Grid.Column="1" Margin="0 5">
            <Separator.LayoutTransform>
                <RotateTransform Angle="90" />
            </Separator.LayoutTransform>
        </Separator>

        <Grid Grid.Column="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="0" Text="Groups permission" Margin="10" Style="{StaticResource SecondHeader}"/>

            <DataGrid Name="GroupsDataGrid" ItemsSource="{Binding Acl.Permissions}" Margin="10"                        
                      CanUserAddRows="False" Grid.Row="1" AutoGenerateColumns="False" IsReadOnly="True"
                      Background="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}"
                      SelectionChanged="GroupsDataGrid_SelectionChanged">
                <DataGrid.Resources>
                    <Style BasedOn="{StaticResource {x:Type DataGridColumnHeader}}" TargetType="DataGridColumnHeader">
                        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                        <Setter Property="Padding" Value="5" />
                    </Style>
                    <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
                        <Setter Property="BorderThickness" Value="0"/>
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="{x:Null}" />
                                <Setter Property="BorderBrush" Value="{x:Null}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.Resources>
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
                        <Setter Property="IsEnabled" Value="{Binding IsSelectable}"/>
                    </Style>
                </DataGrid.RowStyle>

                <DataGrid.Columns>
                    <DataGridTemplateColumn Header="Group name" SortMemberPath="GroupName" Width="*">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding GroupName}" VerticalAlignment="Center"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <DataGridTemplateColumn Header="Owner" Width="*">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <RadioButton GroupName="{Binding GroupName}" VerticalAlignment="Center" IsEnabled="False"
                                             IsChecked="{Binding AccessLevel, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay,
                                    Converter={StaticResource EqualityWithParameterToBooleanConverter}, 
                                    ConverterParameter={x:Static access:Permission.Owner}}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <DataGridTemplateColumn Header="Write" Width="*">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <RadioButton GroupName="{Binding GroupName}" VerticalAlignment="Center"
                                             IsChecked="{Binding AccessLevel, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay,
                                    Converter={StaticResource EqualityWithParameterToBooleanConverter}, 
                                    ConverterParameter={x:Static access:Permission.Write}}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <DataGridTemplateColumn Header="Read" Width="*">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <RadioButton GroupName="{Binding GroupName}" VerticalAlignment="Center"
                                             IsChecked="{Binding AccessLevel, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay,
                                    Converter={StaticResource EqualityWithParameterToBooleanConverter}, 
                                    ConverterParameter={x:Static access:Permission.Read}}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <DataGridTemplateColumn Header="None" Width="*">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <RadioButton GroupName="{Binding GroupName}" VerticalAlignment="Center"
                                             IsChecked="{Binding AccessLevel, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay,
                                    Converter={StaticResource EqualityWithParameterToBooleanConverter}, 
                                    ConverterParameter={x:Static access:Permission.None}}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>

        <waiting:WaitingControl Grid.Column="0" Grid.ColumnSpan="3" Message="Please wait..."
                                MessageForeground="{DynamicResource MaterialDesignBody}"
                                Visibility="{Binding WaitingVisibility, FallbackValue=Visible}"/>
    </Grid>
</UserControl>
