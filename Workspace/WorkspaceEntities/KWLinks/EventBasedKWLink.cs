//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using GPAS.Workspace.Entities.KWLinks;

namespace GPAS.Workspace.Entities
{
    /// <summary>
    /// کلاس نگهداری و استفاده از رابطه (لینک) مبتنی بر رخداد میانی
    /// این نوع رابطه، از یک وابستگی (ریلیشنشیپ) بین شی مبدا با رخداد میانی و یک وابستگی دیگر بین رخداد میانی با شی مقصد تشکیل شده است
    /// اجزای این کلاس با پیش فرض استفاده صحیح توسط استفاده کننده قابل تغییر هستند و مدیریت مقداردهی معتبر اجزای در دسترس آن، برعهده استفاده کننده می باشد
    /// </summary>
	public class EventBasedKWLink : CompoundKWLink, IObjectContainerKWLink
    {
        /// <summary>
        /// رخداد میانی رابطه را برمی گرداند یا مقداردهی می کند
        /// </summary>
		public virtual KWObject IntermediaryEvent
        {
            get;
            set;
        }
        /// <summary>
        /// وابستگی (ریلیشنشیپ) بین شی مبدا و رخداد میانی را برمی گرداند یا مقداردهی می کند
        /// </summary>
        public virtual KWRelationship FirstRelationship
        {
            get;
            set;
        }
        /// <summary>
        /// وابستگی (ریلیشنشیپ) بین رخداد میانی و شی مقصد را برمی گرداند یا مقداردهی می کند
        /// </summary>
		public virtual KWRelationship SecondRelationship
        {
            get;
            set;
        }
        /// <summary>
        /// شی مبدا رابطه را برمی گرداند یا مقداردهی می کند
        /// </summary>
        public override KWObject Source
        {
            get;
            set;
        }
        /// <summary>
        /// شی مقصد رابطه را برمی گرداند یا مقداردهی می کند
        /// </summary>
        public override KWObject Target
        {
            get;
            set;
        }

        private LinkDirection direction = LinkDirection.Bidirectional;

        /// <summary>
        /// جهت رابطه را براساس جهت وابستگی های درونی رابطه برمی گرداند
        /// </summary>
        /// <remarks>
        /// درصورتی که جهت وابستگی شی مبدا به رخداد میانی و نیز وابستگی رخداد میانی به شی مقصد یکی باشد، جهت رابطه نیز همان خواهد بود؛ در غیراینصورت جهت دو طرفه برگردانده می شود.
        /// </remarks>
        public override LinkDirection LinkDirection
        {
            get { return direction; }
        }
        public void SetDirection(LinkDirection newDirection)
        {
            direction = newDirection;
        }

        /// <summary>
        /// عنوان نمایشی برای رابطه را برمی گرداند؛ این مقدار همان عنوان نمایشی رخداد میانی است.
        /// </summary>
        public override string Text
        {
            get { return IntermediaryEvent.GetObjectLabel(); }
        }
        /// <summary>
        /// نوع متناسب با رابطه برمی گرداند؛ این نوع همان نوع رخداد میانی است.
        /// </summary>
        public override string TypeURI
        {
            get { return IntermediaryEvent.TypeURI; }
        }
        /// <summary>
        /// قابلیت ادغام/باز شدن برای رابطه را برمی گرداند؛ یک رابطه مبتنی بر رخداد میانی همیشه ادغام پذیر هست.
        /// </summary>
        public override bool IsUnmergable
        {
            get { return true; }
        }

        public bool Equals(KWLink compairLink)
        {
            if (!(compairLink is EventBasedKWLink))
                return false;
            return
                (FirstRelationship.Equals((compairLink as EventBasedKWLink).FirstRelationship)
                    && SecondRelationship.Equals((compairLink as EventBasedKWLink).SecondRelationship))
                || FirstRelationship.Equals((compairLink as EventBasedKWLink).SecondRelationship)
                    && SecondRelationship.Equals((compairLink as EventBasedKWLink).FirstRelationship);
        }

        public override bool ContainsLink(KWLink kwlinkToCheck)
        {
            return
                FirstRelationship.Equals((kwlinkToCheck as RelationshipBasedKWLink).Relationship)
                || SecondRelationship.Equals((kwlinkToCheck as RelationshipBasedKWLink).Relationship);
        }

        public override HashSet<long> GetAllLinks()
        {
            return new HashSet<long>() { FirstRelationship.ID, SecondRelationship.ID };
        }

        public bool ContainsObject(KWObject objectToCheck)
        {
            return IntermediaryEvent.Equals(objectToCheck);
        }
        public IEnumerable<KWObject> GetContainedObjects()
        {
            return new KWObject[] { IntermediaryEvent };
        }

        public override bool Equals(object x)
        {
            if (x == null || !(x is EventBasedKWLink))
                return false;
            
            return this.Equals(x as EventBasedKWLink);
        }

        public override int GetHashCode()
        {            
            return (FirstRelationship.ID ^ SecondRelationship.ID).GetHashCode();
        }
    }
}