//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GPAS.FeatureTest.DispatchTestServiceAccess.TestService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupInfo", Namespace="http://schemas.datacontract.org/2004/07/GPAS.AccessControl.Groups")]
    [System.SerializableAttribute()]
    public partial class GroupInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedTime {
            get {
                return this.CreatedTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedTimeField, value) != true)) {
                    this.CreatedTimeField = value;
                    this.RaisePropertyChanged("CreatedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/GPAS.AccessControl.Users")]
    [System.SerializableAttribute()]
    public partial class UserInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedTime {
            get {
                return this.CreatedTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedTimeField, value) != true)) {
                    this.CreatedTimeField = value;
                    this.RaisePropertyChanged("CreatedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestService.ITestService")]
    public interface ITestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/CreateNewGroup", ReplyAction="http://tempuri.org/ITestService/CreateNewGroupResponse")]
        void CreateNewGroup(string groupName, string description, string createdBy, bool appendGroupToSearchSchemas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/CreateNewGroup", ReplyAction="http://tempuri.org/ITestService/CreateNewGroupResponse")]
        System.Threading.Tasks.Task CreateNewGroupAsync(string groupName, string description, string createdBy, bool appendGroupToSearchSchemas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetGroups", ReplyAction="http://tempuri.org/ITestService/GetGroupsResponse")]
        GPAS.FeatureTest.DispatchTestServiceAccess.TestService.GroupInfo[] GetGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetGroups", ReplyAction="http://tempuri.org/ITestService/GetGroupsResponse")]
        System.Threading.Tasks.Task<GPAS.FeatureTest.DispatchTestServiceAccess.TestService.GroupInfo[]> GetGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/CreateNewMembership", ReplyAction="http://tempuri.org/ITestService/CreateNewMembershipResponse")]
        void CreateNewMembership(string groupName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/CreateNewMembership", ReplyAction="http://tempuri.org/ITestService/CreateNewMembershipResponse")]
        System.Threading.Tasks.Task CreateNewMembershipAsync(string groupName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetMembershipUsers", ReplyAction="http://tempuri.org/ITestService/GetMembershipUsersResponse")]
        GPAS.FeatureTest.DispatchTestServiceAccess.TestService.UserInfo[] GetMembershipUsers(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetMembershipUsers", ReplyAction="http://tempuri.org/ITestService/GetMembershipUsersResponse")]
        System.Threading.Tasks.Task<GPAS.FeatureTest.DispatchTestServiceAccess.TestService.UserInfo[]> GetMembershipUsersAsync(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetGroupsOfUser", ReplyAction="http://tempuri.org/ITestService/GetGroupsOfUserResponse")]
        string[] GetGroupsOfUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetGroupsOfUser", ReplyAction="http://tempuri.org/ITestService/GetGroupsOfUserResponse")]
        System.Threading.Tasks.Task<string[]> GetGroupsOfUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/SetGroupsMembershipForUser", ReplyAction="http://tempuri.org/ITestService/SetGroupsMembershipForUserResponse")]
        void SetGroupsMembershipForUser(string userName, string[] groupNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/SetGroupsMembershipForUser", ReplyAction="http://tempuri.org/ITestService/SetGroupsMembershipForUserResponse")]
        System.Threading.Tasks.Task SetGroupsMembershipForUserAsync(string userName, string[] groupNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/RevokeMembership", ReplyAction="http://tempuri.org/ITestService/RevokeMembershipResponse")]
        void RevokeMembership(string userName, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/RevokeMembership", ReplyAction="http://tempuri.org/ITestService/RevokeMembershipResponse")]
        System.Threading.Tasks.Task RevokeMembershipAsync(string userName, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/RemoveMembership", ReplyAction="http://tempuri.org/ITestService/RemoveMembershipResponse")]
        void RemoveMembership(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/RemoveMembership", ReplyAction="http://tempuri.org/ITestService/RemoveMembershipResponse")]
        System.Threading.Tasks.Task RemoveMembershipAsync(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/CreateNewAccount", ReplyAction="http://tempuri.org/ITestService/CreateNewAccountResponse")]
        void CreateNewAccount(string userName, string password, string firstName, string lastName, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/CreateNewAccount", ReplyAction="http://tempuri.org/ITestService/CreateNewAccountResponse")]
        System.Threading.Tasks.Task CreateNewAccountAsync(string userName, string password, string firstName, string lastName, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/ChangeUserAccountProfile", ReplyAction="http://tempuri.org/ITestService/ChangeUserAccountProfileResponse")]
        void ChangeUserAccountProfile(string userName, string newFirstName, string newLastName, string newEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/ChangeUserAccountProfile", ReplyAction="http://tempuri.org/ITestService/ChangeUserAccountProfileResponse")]
        System.Threading.Tasks.Task ChangeUserAccountProfileAsync(string userName, string newFirstName, string newLastName, string newEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/ChangePassword", ReplyAction="http://tempuri.org/ITestService/ChangePasswordResponse")]
        void ChangePassword(string userName, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/ChangePassword", ReplyAction="http://tempuri.org/ITestService/ChangePasswordResponse")]
        System.Threading.Tasks.Task ChangePasswordAsync(string userName, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetUserAccounts", ReplyAction="http://tempuri.org/ITestService/GetUserAccountsResponse")]
        GPAS.FeatureTest.DispatchTestServiceAccess.TestService.UserInfo[] GetUserAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetUserAccounts", ReplyAction="http://tempuri.org/ITestService/GetUserAccountsResponse")]
        System.Threading.Tasks.Task<GPAS.FeatureTest.DispatchTestServiceAccess.TestService.UserInfo[]> GetUserAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/Authenticate", ReplyAction="http://tempuri.org/ITestService/AuthenticateResponse")]
        bool Authenticate(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/Authenticate", ReplyAction="http://tempuri.org/ITestService/AuthenticateResponse")]
        System.Threading.Tasks.Task<bool> AuthenticateAsync(string userName, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestServiceChannel : GPAS.FeatureTest.DispatchTestServiceAccess.TestService.ITestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServiceClient : System.ServiceModel.ClientBase<GPAS.FeatureTest.DispatchTestServiceAccess.TestService.ITestService>, GPAS.FeatureTest.DispatchTestServiceAccess.TestService.ITestService {
        
        public TestServiceClient() {
        }
        
        public TestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateNewGroup(string groupName, string description, string createdBy, bool appendGroupToSearchSchemas) {
            base.Channel.CreateNewGroup(groupName, description, createdBy, appendGroupToSearchSchemas);
        }
        
        public System.Threading.Tasks.Task CreateNewGroupAsync(string groupName, string description, string createdBy, bool appendGroupToSearchSchemas) {
            return base.Channel.CreateNewGroupAsync(groupName, description, createdBy, appendGroupToSearchSchemas);
        }
        
        public GPAS.FeatureTest.DispatchTestServiceAccess.TestService.GroupInfo[] GetGroups() {
            return base.Channel.GetGroups();
        }
        
        public System.Threading.Tasks.Task<GPAS.FeatureTest.DispatchTestServiceAccess.TestService.GroupInfo[]> GetGroupsAsync() {
            return base.Channel.GetGroupsAsync();
        }
        
        public void CreateNewMembership(string groupName, string userName) {
            base.Channel.CreateNewMembership(groupName, userName);
        }
        
        public System.Threading.Tasks.Task CreateNewMembershipAsync(string groupName, string userName) {
            return base.Channel.CreateNewMembershipAsync(groupName, userName);
        }
        
        public GPAS.FeatureTest.DispatchTestServiceAccess.TestService.UserInfo[] GetMembershipUsers(string groupName) {
            return base.Channel.GetMembershipUsers(groupName);
        }
        
        public System.Threading.Tasks.Task<GPAS.FeatureTest.DispatchTestServiceAccess.TestService.UserInfo[]> GetMembershipUsersAsync(string groupName) {
            return base.Channel.GetMembershipUsersAsync(groupName);
        }
        
        public string[] GetGroupsOfUser(string username) {
            return base.Channel.GetGroupsOfUser(username);
        }
        
        public System.Threading.Tasks.Task<string[]> GetGroupsOfUserAsync(string username) {
            return base.Channel.GetGroupsOfUserAsync(username);
        }
        
        public void SetGroupsMembershipForUser(string userName, string[] groupNames) {
            base.Channel.SetGroupsMembershipForUser(userName, groupNames);
        }
        
        public System.Threading.Tasks.Task SetGroupsMembershipForUserAsync(string userName, string[] groupNames) {
            return base.Channel.SetGroupsMembershipForUserAsync(userName, groupNames);
        }
        
        public void RevokeMembership(string userName, string groupName) {
            base.Channel.RevokeMembership(userName, groupName);
        }
        
        public System.Threading.Tasks.Task RevokeMembershipAsync(string userName, string groupName) {
            return base.Channel.RevokeMembershipAsync(userName, groupName);
        }
        
        public void RemoveMembership(string groupName) {
            base.Channel.RemoveMembership(groupName);
        }
        
        public System.Threading.Tasks.Task RemoveMembershipAsync(string groupName) {
            return base.Channel.RemoveMembershipAsync(groupName);
        }
        
        public void CreateNewAccount(string userName, string password, string firstName, string lastName, string email) {
            base.Channel.CreateNewAccount(userName, password, firstName, lastName, email);
        }
        
        public System.Threading.Tasks.Task CreateNewAccountAsync(string userName, string password, string firstName, string lastName, string email) {
            return base.Channel.CreateNewAccountAsync(userName, password, firstName, lastName, email);
        }
        
        public void ChangeUserAccountProfile(string userName, string newFirstName, string newLastName, string newEmail) {
            base.Channel.ChangeUserAccountProfile(userName, newFirstName, newLastName, newEmail);
        }
        
        public System.Threading.Tasks.Task ChangeUserAccountProfileAsync(string userName, string newFirstName, string newLastName, string newEmail) {
            return base.Channel.ChangeUserAccountProfileAsync(userName, newFirstName, newLastName, newEmail);
        }
        
        public void ChangePassword(string userName, string newPassword) {
            base.Channel.ChangePassword(userName, newPassword);
        }
        
        public System.Threading.Tasks.Task ChangePasswordAsync(string userName, string newPassword) {
            return base.Channel.ChangePasswordAsync(userName, newPassword);
        }
        
        public GPAS.FeatureTest.DispatchTestServiceAccess.TestService.UserInfo[] GetUserAccounts() {
            return base.Channel.GetUserAccounts();
        }
        
        public System.Threading.Tasks.Task<GPAS.FeatureTest.DispatchTestServiceAccess.TestService.UserInfo[]> GetUserAccountsAsync() {
            return base.Channel.GetUserAccountsAsync();
        }
        
        public bool Authenticate(string userName, string password) {
            return base.Channel.Authenticate(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticateAsync(string userName, string password) {
            return base.Channel.AuthenticateAsync(userName, password);
        }
    }
}
