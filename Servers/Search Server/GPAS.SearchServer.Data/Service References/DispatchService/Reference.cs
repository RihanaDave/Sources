//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GPAS.SearchServer.Access.DispatchService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddedConcepts", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.Publish")]
    [System.SerializableAttribute()]
    public partial class AddedConcepts : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Dispatch.Entities.Concepts.KMedia[] AddedMediasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Dispatch.Entities.Concepts.KObject[] AddedObjectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Dispatch.Entities.Concepts.KProperty[] AddedPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[] AddedRelationshipsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Dispatch.Entities.Concepts.KMedia[] AddedMedias {
            get {
                return this.AddedMediasField;
            }
            set {
                if ((object.ReferenceEquals(this.AddedMediasField, value) != true)) {
                    this.AddedMediasField = value;
                    this.RaisePropertyChanged("AddedMedias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Dispatch.Entities.Concepts.KObject[] AddedObjects {
            get {
                return this.AddedObjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.AddedObjectsField, value) != true)) {
                    this.AddedObjectsField = value;
                    this.RaisePropertyChanged("AddedObjects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Dispatch.Entities.Concepts.KProperty[] AddedProperties {
            get {
                return this.AddedPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.AddedPropertiesField, value) != true)) {
                    this.AddedPropertiesField = value;
                    this.RaisePropertyChanged("AddedProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Dispatch.Entities.Concepts.RelationshipBaseKlink[] AddedRelationships {
            get {
                return this.AddedRelationshipsField;
            }
            set {
                if ((object.ReferenceEquals(this.AddedRelationshipsField, value) != true)) {
                    this.AddedRelationshipsField = value;
                    this.RaisePropertyChanged("AddedRelationships");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModifiedConcepts", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.Publish")]
    [System.SerializableAttribute()]
    public partial class ModifiedConcepts : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Dispatch.Entities.Concepts.KMedia[] DeletedMediasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.SearchServer.Access.DispatchService.ModifiedProperty[] ModifiedPropertiesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Dispatch.Entities.Concepts.KMedia[] DeletedMedias {
            get {
                return this.DeletedMediasField;
            }
            set {
                if ((object.ReferenceEquals(this.DeletedMediasField, value) != true)) {
                    this.DeletedMediasField = value;
                    this.RaisePropertyChanged("DeletedMedias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.SearchServer.Access.DispatchService.ModifiedProperty[] ModifiedProperties {
            get {
                return this.ModifiedPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedPropertiesField, value) != true)) {
                    this.ModifiedPropertiesField = value;
                    this.RaisePropertyChanged("ModifiedProperties");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModifiedProperty", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.Publish")]
    [System.SerializableAttribute()]
    public partial class ModifiedProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NewValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long OwnerObjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeUriField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NewValue {
            get {
                return this.NewValueField;
            }
            set {
                if ((object.ReferenceEquals(this.NewValueField, value) != true)) {
                    this.NewValueField = value;
                    this.RaisePropertyChanged("NewValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long OwnerObjectID {
            get {
                return this.OwnerObjectIDField;
            }
            set {
                if ((this.OwnerObjectIDField.Equals(value) != true)) {
                    this.OwnerObjectIDField = value;
                    this.RaisePropertyChanged("OwnerObjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeUri {
            get {
                return this.TypeUriField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeUriField, value) != true)) {
                    this.TypeUriField = value;
                    this.RaisePropertyChanged("TypeUri");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishResult", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Dispatch.Entities.Publish")]
    [System.SerializableAttribute()]
    public partial class PublishResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan HorizonServerSyncDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HorizonServerSynchronizedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan RepositoryStoreDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan SearchServerSyncDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SearchServerSynchronizedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan HorizonServerSyncDuration {
            get {
                return this.HorizonServerSyncDurationField;
            }
            set {
                if ((this.HorizonServerSyncDurationField.Equals(value) != true)) {
                    this.HorizonServerSyncDurationField = value;
                    this.RaisePropertyChanged("HorizonServerSyncDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HorizonServerSynchronized {
            get {
                return this.HorizonServerSynchronizedField;
            }
            set {
                if ((this.HorizonServerSynchronizedField.Equals(value) != true)) {
                    this.HorizonServerSynchronizedField = value;
                    this.RaisePropertyChanged("HorizonServerSynchronized");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan RepositoryStoreDuration {
            get {
                return this.RepositoryStoreDurationField;
            }
            set {
                if ((this.RepositoryStoreDurationField.Equals(value) != true)) {
                    this.RepositoryStoreDurationField = value;
                    this.RaisePropertyChanged("RepositoryStoreDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan SearchServerSyncDuration {
            get {
                return this.SearchServerSyncDurationField;
            }
            set {
                if ((this.SearchServerSyncDurationField.Equals(value) != true)) {
                    this.SearchServerSyncDurationField = value;
                    this.RaisePropertyChanged("SearchServerSyncDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SearchServerSynchronized {
            get {
                return this.SearchServerSynchronizedField;
            }
            set {
                if ((this.SearchServerSynchronizedField.Equals(value) != true)) {
                    this.SearchServerSynchronizedField = value;
                    this.RaisePropertyChanged("SearchServerSynchronized");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DispatchService.IInfrastructureService")]
    public interface IInfrastructureService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetObjectListById", ReplyAction="http://tempuri.org/IInfrastructureService/GetObjectListByIdResponse")]
        GPAS.Dispatch.Entities.Concepts.KObject[] GetObjectListById(long[] dbObjectIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetObjectListById", ReplyAction="http://tempuri.org/IInfrastructureService/GetObjectListByIdResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> GetObjectListByIdAsync(long[] dbObjectIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/Publish", ReplyAction="http://tempuri.org/IInfrastructureService/PublishResponse")]
        GPAS.SearchServer.Access.DispatchService.PublishResult Publish(GPAS.SearchServer.Access.DispatchService.AddedConcepts addedConcept, GPAS.SearchServer.Access.DispatchService.ModifiedConcepts modifiedConcept, long dataSourceID, bool isContinousPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/Publish", ReplyAction="http://tempuri.org/IInfrastructureService/PublishResponse")]
        System.Threading.Tasks.Task<GPAS.SearchServer.Access.DispatchService.PublishResult> PublishAsync(GPAS.SearchServer.Access.DispatchService.AddedConcepts addedConcept, GPAS.SearchServer.Access.DispatchService.ModifiedConcepts modifiedConcept, long dataSourceID, bool isContinousPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/FinalizeContinousPublish", ReplyAction="http://tempuri.org/IInfrastructureService/FinalizeContinousPublishResponse")]
        void FinalizeContinousPublish();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/FinalizeContinousPublish", ReplyAction="http://tempuri.org/IInfrastructureService/FinalizeContinousPublishResponse")]
        System.Threading.Tasks.Task FinalizeContinousPublishAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/RegisterNewDataSourceToRepositoryServer" +
            "", ReplyAction="http://tempuri.org/IInfrastructureService/RegisterNewDataSourceToRepositoryServer" +
            "Response")]
        void RegisterNewDataSourceToRepositoryServer(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/RegisterNewDataSourceToRepositoryServer" +
            "", ReplyAction="http://tempuri.org/IInfrastructureService/RegisterNewDataSourceToRepositoryServer" +
            "Response")]
        System.Threading.Tasks.Task RegisterNewDataSourceToRepositoryServerAsync(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/SynchronizeNewDataSourceInSearchServer", ReplyAction="http://tempuri.org/IInfrastructureService/SynchronizeNewDataSourceInSearchServerR" +
            "esponse")]
        void SynchronizeNewDataSourceInSearchServer(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/SynchronizeNewDataSourceInSearchServer", ReplyAction="http://tempuri.org/IInfrastructureService/SynchronizeNewDataSourceInSearchServerR" +
            "esponse")]
        System.Threading.Tasks.Task SynchronizeNewDataSourceInSearchServerAsync(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetNewObjectIdRange", ReplyAction="http://tempuri.org/IInfrastructureService/GetNewObjectIdRangeResponse")]
        long GetNewObjectIdRange(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetNewObjectIdRange", ReplyAction="http://tempuri.org/IInfrastructureService/GetNewObjectIdRangeResponse")]
        System.Threading.Tasks.Task<long> GetNewObjectIdRangeAsync(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetLastAssignedObjectID", ReplyAction="http://tempuri.org/IInfrastructureService/GetLastAssignedObjectIDResponse")]
        long GetLastAssignedObjectID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetLastAssignedObjectID", ReplyAction="http://tempuri.org/IInfrastructureService/GetLastAssignedObjectIDResponse")]
        System.Threading.Tasks.Task<long> GetLastAssignedObjectIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetLastAssignedDataSourceID", ReplyAction="http://tempuri.org/IInfrastructureService/GetLastAssignedDataSourceIDResponse")]
        long GetLastAssignedDataSourceID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetLastAssignedDataSourceID", ReplyAction="http://tempuri.org/IInfrastructureService/GetLastAssignedDataSourceIDResponse")]
        System.Threading.Tasks.Task<long> GetLastAssignedDataSourceIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetNewPropertyIdRange", ReplyAction="http://tempuri.org/IInfrastructureService/GetNewPropertyIdRangeResponse")]
        long GetNewPropertyIdRange(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetNewPropertyIdRange", ReplyAction="http://tempuri.org/IInfrastructureService/GetNewPropertyIdRangeResponse")]
        System.Threading.Tasks.Task<long> GetNewPropertyIdRangeAsync(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetNewRelationIdRange", ReplyAction="http://tempuri.org/IInfrastructureService/GetNewRelationIdRangeResponse")]
        long GetNewRelationIdRange(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetNewRelationIdRange", ReplyAction="http://tempuri.org/IInfrastructureService/GetNewRelationIdRangeResponse")]
        System.Threading.Tasks.Task<long> GetNewRelationIdRangeAsync(long count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetLastAssignedRelatioshshipID", ReplyAction="http://tempuri.org/IInfrastructureService/GetLastAssignedRelatioshshipIDResponse")]
        long GetLastAssignedRelatioshshipID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetLastAssignedRelatioshshipID", ReplyAction="http://tempuri.org/IInfrastructureService/GetLastAssignedRelatioshshipIDResponse")]
        System.Threading.Tasks.Task<long> GetLastAssignedRelatioshshipIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetNewDataSourceId", ReplyAction="http://tempuri.org/IInfrastructureService/GetNewDataSourceIdResponse")]
        long GetNewDataSourceId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetNewDataSourceId", ReplyAction="http://tempuri.org/IInfrastructureService/GetNewDataSourceIdResponse")]
        System.Threading.Tasks.Task<long> GetNewDataSourceIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetDatalakeSlice", ReplyAction="http://tempuri.org/IInfrastructureService/GetDatalakeSliceResponse")]
        string[] GetDatalakeSlice(string category, string dateTime, GPAS.Dispatch.Entities.DatalakeEntities.SearchCriteria[] searchCriterias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetDatalakeSlice", ReplyAction="http://tempuri.org/IInfrastructureService/GetDatalakeSliceResponse")]
        System.Threading.Tasks.Task<string[]> GetDatalakeSliceAsync(string category, string dateTime, GPAS.Dispatch.Entities.DatalakeEntities.SearchCriteria[] searchCriterias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetGroups", ReplyAction="http://tempuri.org/IInfrastructureService/GetGroupsResponse")]
        GPAS.AccessControl.Groups.GroupInfo[] GetGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetGroups", ReplyAction="http://tempuri.org/IInfrastructureService/GetGroupsResponse")]
        System.Threading.Tasks.Task<GPAS.AccessControl.Groups.GroupInfo[]> GetGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/UploadDocumentFile", ReplyAction="http://tempuri.org/IInfrastructureService/UploadDocumentFileResponse")]
        void UploadDocumentFile(long docID, byte[] docContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/UploadDocumentFile", ReplyAction="http://tempuri.org/IInfrastructureService/UploadDocumentFileResponse")]
        System.Threading.Tasks.Task UploadDocumentFileAsync(long docID, byte[] docContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/UploadDataSourceFile", ReplyAction="http://tempuri.org/IInfrastructureService/UploadDataSourceFileResponse")]
        void UploadDataSourceFile(long dataSourceID, byte[] dataSourceContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/UploadDataSourceFile", ReplyAction="http://tempuri.org/IInfrastructureService/UploadDataSourceFileResponse")]
        System.Threading.Tasks.Task UploadDataSourceFileAsync(long dataSourceID, byte[] dataSourceContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/UploadFileAsDocumentAndDataSource", ReplyAction="http://tempuri.org/IInfrastructureService/UploadFileAsDocumentAndDataSourceRespon" +
            "se")]
        void UploadFileAsDocumentAndDataSource(byte[] fileContent, long docID, long dataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/UploadFileAsDocumentAndDataSource", ReplyAction="http://tempuri.org/IInfrastructureService/UploadFileAsDocumentAndDataSourceRespon" +
            "se")]
        System.Threading.Tasks.Task UploadFileAsDocumentAndDataSourceAsync(byte[] fileContent, long docID, long dataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/UploadDocumentFromJobShare", ReplyAction="http://tempuri.org/IInfrastructureService/UploadDocumentFromJobShareResponse")]
        void UploadDocumentFromJobShare(long docID, string docJobSharePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/UploadDocumentFromJobShare", ReplyAction="http://tempuri.org/IInfrastructureService/UploadDocumentFromJobShareResponse")]
        System.Threading.Tasks.Task UploadDocumentFromJobShareAsync(long docID, string docJobSharePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/UploadDataSourceFromJobShare", ReplyAction="http://tempuri.org/IInfrastructureService/UploadDataSourceFromJobShareResponse")]
        void UploadDataSourceFromJobShare(long dataSourceID, string dataSourceJobSharePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/UploadDataSourceFromJobShare", ReplyAction="http://tempuri.org/IInfrastructureService/UploadDataSourceFromJobShareResponse")]
        System.Threading.Tasks.Task UploadDataSourceFromJobShareAsync(long dataSourceID, string dataSourceJobSharePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetOntology", ReplyAction="http://tempuri.org/IInfrastructureService/GetOntologyResponse")]
        System.IO.Stream GetOntology();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetOntology", ReplyAction="http://tempuri.org/IInfrastructureService/GetOntologyResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetOntologyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/OptimizeDeployment", ReplyAction="http://tempuri.org/IInfrastructureService/OptimizeDeploymentResponse")]
        void OptimizeDeployment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/OptimizeDeployment", ReplyAction="http://tempuri.org/IInfrastructureService/OptimizeDeploymentResponse")]
        System.Threading.Tasks.Task OptimizeDeploymentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetOldestSearchUnsyncObjects", ReplyAction="http://tempuri.org/IInfrastructureService/GetOldestSearchUnsyncObjectsResponse")]
        long[] GetOldestSearchUnsyncObjects(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetOldestSearchUnsyncObjects", ReplyAction="http://tempuri.org/IInfrastructureService/GetOldestSearchUnsyncObjectsResponse")]
        System.Threading.Tasks.Task<long[]> GetOldestSearchUnsyncObjectsAsync(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetOldestSearchUnsyncDataSources", ReplyAction="http://tempuri.org/IInfrastructureService/GetOldestSearchUnsyncDataSourcesRespons" +
            "e")]
        long[] GetOldestSearchUnsyncDataSources(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetOldestSearchUnsyncDataSources", ReplyAction="http://tempuri.org/IInfrastructureService/GetOldestSearchUnsyncDataSourcesRespons" +
            "e")]
        System.Threading.Tasks.Task<long[]> GetOldestSearchUnsyncDataSourcesAsync(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetOldestHorizonUnsyncObjects", ReplyAction="http://tempuri.org/IInfrastructureService/GetOldestHorizonUnsyncObjectsResponse")]
        long[] GetOldestHorizonUnsyncObjects(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetOldestHorizonUnsyncObjects", ReplyAction="http://tempuri.org/IInfrastructureService/GetOldestHorizonUnsyncObjectsResponse")]
        System.Threading.Tasks.Task<long[]> GetOldestHorizonUnsyncObjectsAsync(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetOldestHorizonUnsyncRelatioinships", ReplyAction="http://tempuri.org/IInfrastructureService/GetOldestHorizonUnsyncRelatioinshipsRes" +
            "ponse")]
        long[] GetOldestHorizonUnsyncRelatioinships(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetOldestHorizonUnsyncRelatioinships", ReplyAction="http://tempuri.org/IInfrastructureService/GetOldestHorizonUnsyncRelatioinshipsRes" +
            "ponse")]
        System.Threading.Tasks.Task<long[]> GetOldestHorizonUnsyncRelatioinshipsAsync(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/ApplySearchObjectsSynchronizationResult" +
            "", ReplyAction="http://tempuri.org/IInfrastructureService/ApplySearchObjectsSynchronizationResult" +
            "Response")]
        void ApplySearchObjectsSynchronizationResult(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/ApplySearchObjectsSynchronizationResult" +
            "", ReplyAction="http://tempuri.org/IInfrastructureService/ApplySearchObjectsSynchronizationResult" +
            "Response")]
        System.Threading.Tasks.Task ApplySearchObjectsSynchronizationResultAsync(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/ApplySearchDataSourcesSynchronizationRe" +
            "sult", ReplyAction="http://tempuri.org/IInfrastructureService/ApplySearchDataSourcesSynchronizationRe" +
            "sultResponse")]
        void ApplySearchDataSourcesSynchronizationResult(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/ApplySearchDataSourcesSynchronizationRe" +
            "sult", ReplyAction="http://tempuri.org/IInfrastructureService/ApplySearchDataSourcesSynchronizationRe" +
            "sultResponse")]
        System.Threading.Tasks.Task ApplySearchDataSourcesSynchronizationResultAsync(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/ApplyHorizonObjectsSynchronizationResul" +
            "t", ReplyAction="http://tempuri.org/IInfrastructureService/ApplyHorizonObjectsSynchronizationResul" +
            "tResponse")]
        void ApplyHorizonObjectsSynchronizationResult(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/ApplyHorizonObjectsSynchronizationResul" +
            "t", ReplyAction="http://tempuri.org/IInfrastructureService/ApplyHorizonObjectsSynchronizationResul" +
            "tResponse")]
        System.Threading.Tasks.Task ApplyHorizonObjectsSynchronizationResultAsync(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/ApplyHorizonRelationshipsSynchronizatio" +
            "nResult", ReplyAction="http://tempuri.org/IInfrastructureService/ApplyHorizonRelationshipsSynchronizatio" +
            "nResultResponse")]
        void ApplyHorizonRelationshipsSynchronizationResult(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/ApplyHorizonRelationshipsSynchronizatio" +
            "nResult", ReplyAction="http://tempuri.org/IInfrastructureService/ApplyHorizonRelationshipsSynchronizatio" +
            "nResultResponse")]
        System.Threading.Tasks.Task ApplyHorizonRelationshipsSynchronizationResultAsync(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetHorizonUnsyncObjectsCount", ReplyAction="http://tempuri.org/IInfrastructureService/GetHorizonUnsyncObjectsCountResponse")]
        int GetHorizonUnsyncObjectsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetHorizonUnsyncObjectsCount", ReplyAction="http://tempuri.org/IInfrastructureService/GetHorizonUnsyncObjectsCountResponse")]
        System.Threading.Tasks.Task<int> GetHorizonUnsyncObjectsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetHorizonUnsyncRelationshipsCount", ReplyAction="http://tempuri.org/IInfrastructureService/GetHorizonUnsyncRelationshipsCountRespo" +
            "nse")]
        int GetHorizonUnsyncRelationshipsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetHorizonUnsyncRelationshipsCount", ReplyAction="http://tempuri.org/IInfrastructureService/GetHorizonUnsyncRelationshipsCountRespo" +
            "nse")]
        System.Threading.Tasks.Task<int> GetHorizonUnsyncRelationshipsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetSearchUnsyncObjectsCount", ReplyAction="http://tempuri.org/IInfrastructureService/GetSearchUnsyncObjectsCountResponse")]
        int GetSearchUnsyncObjectsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/GetSearchUnsyncObjectsCount", ReplyAction="http://tempuri.org/IInfrastructureService/GetSearchUnsyncObjectsCountResponse")]
        System.Threading.Tasks.Task<int> GetSearchUnsyncObjectsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/DeleteHorizonServerUnsyncConcepts", ReplyAction="http://tempuri.org/IInfrastructureService/DeleteHorizonServerUnsyncConceptsRespon" +
            "se")]
        void DeleteHorizonServerUnsyncConcepts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/DeleteHorizonServerUnsyncConcepts", ReplyAction="http://tempuri.org/IInfrastructureService/DeleteHorizonServerUnsyncConceptsRespon" +
            "se")]
        System.Threading.Tasks.Task DeleteHorizonServerUnsyncConceptsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/DeleteSearchServerUnsyncConcepts", ReplyAction="http://tempuri.org/IInfrastructureService/DeleteSearchServerUnsyncConceptsRespons" +
            "e")]
        void DeleteSearchServerUnsyncConcepts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/DeleteSearchServerUnsyncConcepts", ReplyAction="http://tempuri.org/IInfrastructureService/DeleteSearchServerUnsyncConceptsRespons" +
            "e")]
        System.Threading.Tasks.Task DeleteSearchServerUnsyncConceptsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/IsAvailable", ReplyAction="http://tempuri.org/IInfrastructureService/IsAvailableResponse")]
        void IsAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfrastructureService/IsAvailable", ReplyAction="http://tempuri.org/IInfrastructureService/IsAvailableResponse")]
        System.Threading.Tasks.Task IsAvailableAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInfrastructureServiceChannel : GPAS.SearchServer.Access.DispatchService.IInfrastructureService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InfrastructureServiceClient : System.ServiceModel.ClientBase<GPAS.SearchServer.Access.DispatchService.IInfrastructureService>, GPAS.SearchServer.Access.DispatchService.IInfrastructureService {
        
        public InfrastructureServiceClient() {
        }
        
        public InfrastructureServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InfrastructureServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InfrastructureServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InfrastructureServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GPAS.Dispatch.Entities.Concepts.KObject[] GetObjectListById(long[] dbObjectIDs) {
            return base.Channel.GetObjectListById(dbObjectIDs);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.KObject[]> GetObjectListByIdAsync(long[] dbObjectIDs) {
            return base.Channel.GetObjectListByIdAsync(dbObjectIDs);
        }
        
        public GPAS.SearchServer.Access.DispatchService.PublishResult Publish(GPAS.SearchServer.Access.DispatchService.AddedConcepts addedConcept, GPAS.SearchServer.Access.DispatchService.ModifiedConcepts modifiedConcept, long dataSourceID, bool isContinousPublish) {
            return base.Channel.Publish(addedConcept, modifiedConcept, dataSourceID, isContinousPublish);
        }
        
        public System.Threading.Tasks.Task<GPAS.SearchServer.Access.DispatchService.PublishResult> PublishAsync(GPAS.SearchServer.Access.DispatchService.AddedConcepts addedConcept, GPAS.SearchServer.Access.DispatchService.ModifiedConcepts modifiedConcept, long dataSourceID, bool isContinousPublish) {
            return base.Channel.PublishAsync(addedConcept, modifiedConcept, dataSourceID, isContinousPublish);
        }
        
        public void FinalizeContinousPublish() {
            base.Channel.FinalizeContinousPublish();
        }
        
        public System.Threading.Tasks.Task FinalizeContinousPublishAsync() {
            return base.Channel.FinalizeContinousPublishAsync();
        }
        
        public void RegisterNewDataSourceToRepositoryServer(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description) {
            base.Channel.RegisterNewDataSourceToRepositoryServer(dsId, name, type, acl, description);
        }
        
        public System.Threading.Tasks.Task RegisterNewDataSourceToRepositoryServerAsync(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description) {
            return base.Channel.RegisterNewDataSourceToRepositoryServerAsync(dsId, name, type, acl, description);
        }
        
        public void SynchronizeNewDataSourceInSearchServer(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description) {
            base.Channel.SynchronizeNewDataSourceInSearchServer(dsId, name, type, acl, description);
        }
        
        public System.Threading.Tasks.Task SynchronizeNewDataSourceInSearchServerAsync(long dsId, string name, GPAS.AccessControl.DataSourceType type, GPAS.AccessControl.ACL acl, string description) {
            return base.Channel.SynchronizeNewDataSourceInSearchServerAsync(dsId, name, type, acl, description);
        }
        
        public long GetNewObjectIdRange(long count) {
            return base.Channel.GetNewObjectIdRange(count);
        }
        
        public System.Threading.Tasks.Task<long> GetNewObjectIdRangeAsync(long count) {
            return base.Channel.GetNewObjectIdRangeAsync(count);
        }
        
        public long GetLastAssignedObjectID() {
            return base.Channel.GetLastAssignedObjectID();
        }
        
        public System.Threading.Tasks.Task<long> GetLastAssignedObjectIDAsync() {
            return base.Channel.GetLastAssignedObjectIDAsync();
        }
        
        public long GetLastAssignedDataSourceID() {
            return base.Channel.GetLastAssignedDataSourceID();
        }
        
        public System.Threading.Tasks.Task<long> GetLastAssignedDataSourceIDAsync() {
            return base.Channel.GetLastAssignedDataSourceIDAsync();
        }
        
        public long GetNewPropertyIdRange(long count) {
            return base.Channel.GetNewPropertyIdRange(count);
        }
        
        public System.Threading.Tasks.Task<long> GetNewPropertyIdRangeAsync(long count) {
            return base.Channel.GetNewPropertyIdRangeAsync(count);
        }
        
        public long GetNewRelationIdRange(long count) {
            return base.Channel.GetNewRelationIdRange(count);
        }
        
        public System.Threading.Tasks.Task<long> GetNewRelationIdRangeAsync(long count) {
            return base.Channel.GetNewRelationIdRangeAsync(count);
        }
        
        public long GetLastAssignedRelatioshshipID() {
            return base.Channel.GetLastAssignedRelatioshshipID();
        }
        
        public System.Threading.Tasks.Task<long> GetLastAssignedRelatioshshipIDAsync() {
            return base.Channel.GetLastAssignedRelatioshshipIDAsync();
        }
        
        public long GetNewDataSourceId() {
            return base.Channel.GetNewDataSourceId();
        }
        
        public System.Threading.Tasks.Task<long> GetNewDataSourceIdAsync() {
            return base.Channel.GetNewDataSourceIdAsync();
        }
        
        public string[] GetDatalakeSlice(string category, string dateTime, GPAS.Dispatch.Entities.DatalakeEntities.SearchCriteria[] searchCriterias) {
            return base.Channel.GetDatalakeSlice(category, dateTime, searchCriterias);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDatalakeSliceAsync(string category, string dateTime, GPAS.Dispatch.Entities.DatalakeEntities.SearchCriteria[] searchCriterias) {
            return base.Channel.GetDatalakeSliceAsync(category, dateTime, searchCriterias);
        }
        
        public GPAS.AccessControl.Groups.GroupInfo[] GetGroups() {
            return base.Channel.GetGroups();
        }
        
        public System.Threading.Tasks.Task<GPAS.AccessControl.Groups.GroupInfo[]> GetGroupsAsync() {
            return base.Channel.GetGroupsAsync();
        }
        
        public void UploadDocumentFile(long docID, byte[] docContent) {
            base.Channel.UploadDocumentFile(docID, docContent);
        }
        
        public System.Threading.Tasks.Task UploadDocumentFileAsync(long docID, byte[] docContent) {
            return base.Channel.UploadDocumentFileAsync(docID, docContent);
        }
        
        public void UploadDataSourceFile(long dataSourceID, byte[] dataSourceContent) {
            base.Channel.UploadDataSourceFile(dataSourceID, dataSourceContent);
        }
        
        public System.Threading.Tasks.Task UploadDataSourceFileAsync(long dataSourceID, byte[] dataSourceContent) {
            return base.Channel.UploadDataSourceFileAsync(dataSourceID, dataSourceContent);
        }
        
        public void UploadFileAsDocumentAndDataSource(byte[] fileContent, long docID, long dataSourceID) {
            base.Channel.UploadFileAsDocumentAndDataSource(fileContent, docID, dataSourceID);
        }
        
        public System.Threading.Tasks.Task UploadFileAsDocumentAndDataSourceAsync(byte[] fileContent, long docID, long dataSourceID) {
            return base.Channel.UploadFileAsDocumentAndDataSourceAsync(fileContent, docID, dataSourceID);
        }
        
        public void UploadDocumentFromJobShare(long docID, string docJobSharePath) {
            base.Channel.UploadDocumentFromJobShare(docID, docJobSharePath);
        }
        
        public System.Threading.Tasks.Task UploadDocumentFromJobShareAsync(long docID, string docJobSharePath) {
            return base.Channel.UploadDocumentFromJobShareAsync(docID, docJobSharePath);
        }
        
        public void UploadDataSourceFromJobShare(long dataSourceID, string dataSourceJobSharePath) {
            base.Channel.UploadDataSourceFromJobShare(dataSourceID, dataSourceJobSharePath);
        }
        
        public System.Threading.Tasks.Task UploadDataSourceFromJobShareAsync(long dataSourceID, string dataSourceJobSharePath) {
            return base.Channel.UploadDataSourceFromJobShareAsync(dataSourceID, dataSourceJobSharePath);
        }
        
        public System.IO.Stream GetOntology() {
            return base.Channel.GetOntology();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetOntologyAsync() {
            return base.Channel.GetOntologyAsync();
        }
        
        public void OptimizeDeployment() {
            base.Channel.OptimizeDeployment();
        }
        
        public System.Threading.Tasks.Task OptimizeDeploymentAsync() {
            return base.Channel.OptimizeDeploymentAsync();
        }
        
        public long[] GetOldestSearchUnsyncObjects(int count) {
            return base.Channel.GetOldestSearchUnsyncObjects(count);
        }
        
        public System.Threading.Tasks.Task<long[]> GetOldestSearchUnsyncObjectsAsync(int count) {
            return base.Channel.GetOldestSearchUnsyncObjectsAsync(count);
        }
        
        public long[] GetOldestSearchUnsyncDataSources(int count) {
            return base.Channel.GetOldestSearchUnsyncDataSources(count);
        }
        
        public System.Threading.Tasks.Task<long[]> GetOldestSearchUnsyncDataSourcesAsync(int count) {
            return base.Channel.GetOldestSearchUnsyncDataSourcesAsync(count);
        }
        
        public long[] GetOldestHorizonUnsyncObjects(int count) {
            return base.Channel.GetOldestHorizonUnsyncObjects(count);
        }
        
        public System.Threading.Tasks.Task<long[]> GetOldestHorizonUnsyncObjectsAsync(int count) {
            return base.Channel.GetOldestHorizonUnsyncObjectsAsync(count);
        }
        
        public long[] GetOldestHorizonUnsyncRelatioinships(int count) {
            return base.Channel.GetOldestHorizonUnsyncRelatioinships(count);
        }
        
        public System.Threading.Tasks.Task<long[]> GetOldestHorizonUnsyncRelatioinshipsAsync(int count) {
            return base.Channel.GetOldestHorizonUnsyncRelatioinshipsAsync(count);
        }
        
        public void ApplySearchObjectsSynchronizationResult(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult) {
            base.Channel.ApplySearchObjectsSynchronizationResult(synchronizationResult);
        }
        
        public System.Threading.Tasks.Task ApplySearchObjectsSynchronizationResultAsync(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult) {
            return base.Channel.ApplySearchObjectsSynchronizationResultAsync(synchronizationResult);
        }
        
        public void ApplySearchDataSourcesSynchronizationResult(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult) {
            base.Channel.ApplySearchDataSourcesSynchronizationResult(synchronizationResult);
        }
        
        public System.Threading.Tasks.Task ApplySearchDataSourcesSynchronizationResultAsync(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult) {
            return base.Channel.ApplySearchDataSourcesSynchronizationResultAsync(synchronizationResult);
        }
        
        public void ApplyHorizonObjectsSynchronizationResult(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult) {
            base.Channel.ApplyHorizonObjectsSynchronizationResult(synchronizationResult);
        }
        
        public System.Threading.Tasks.Task ApplyHorizonObjectsSynchronizationResultAsync(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult) {
            return base.Channel.ApplyHorizonObjectsSynchronizationResultAsync(synchronizationResult);
        }
        
        public void ApplyHorizonRelationshipsSynchronizationResult(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult) {
            base.Channel.ApplyHorizonRelationshipsSynchronizationResult(synchronizationResult);
        }
        
        public System.Threading.Tasks.Task ApplyHorizonRelationshipsSynchronizationResultAsync(GPAS.Dispatch.Entities.SynchronizationChanges synchronizationResult) {
            return base.Channel.ApplyHorizonRelationshipsSynchronizationResultAsync(synchronizationResult);
        }
        
        public int GetHorizonUnsyncObjectsCount() {
            return base.Channel.GetHorizonUnsyncObjectsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetHorizonUnsyncObjectsCountAsync() {
            return base.Channel.GetHorizonUnsyncObjectsCountAsync();
        }
        
        public int GetHorizonUnsyncRelationshipsCount() {
            return base.Channel.GetHorizonUnsyncRelationshipsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetHorizonUnsyncRelationshipsCountAsync() {
            return base.Channel.GetHorizonUnsyncRelationshipsCountAsync();
        }
        
        public int GetSearchUnsyncObjectsCount() {
            return base.Channel.GetSearchUnsyncObjectsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetSearchUnsyncObjectsCountAsync() {
            return base.Channel.GetSearchUnsyncObjectsCountAsync();
        }
        
        public void DeleteHorizonServerUnsyncConcepts() {
            base.Channel.DeleteHorizonServerUnsyncConcepts();
        }
        
        public System.Threading.Tasks.Task DeleteHorizonServerUnsyncConceptsAsync() {
            return base.Channel.DeleteHorizonServerUnsyncConceptsAsync();
        }
        
        public void DeleteSearchServerUnsyncConcepts() {
            base.Channel.DeleteSearchServerUnsyncConcepts();
        }
        
        public System.Threading.Tasks.Task DeleteSearchServerUnsyncConceptsAsync() {
            return base.Channel.DeleteSearchServerUnsyncConceptsAsync();
        }
        
        public void IsAvailable() {
            base.Channel.IsAvailable();
        }
        
        public System.Threading.Tasks.Task IsAvailableAsync() {
            return base.Channel.IsAvailableAsync();
        }
    }
}
