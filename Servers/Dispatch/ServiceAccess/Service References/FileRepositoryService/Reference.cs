//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GPAS.Dispatch.ServiceAccess.FileRepositoryService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectoryContent", Namespace="http://schemas.datacontract.org/2004/07/GPAS.FileRepository.Logic.Entities")]
    [System.SerializableAttribute()]
    public partial class DirectoryContent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Dispatch.ServiceAccess.FileRepositoryService.DirectoryContentType ContentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UriAddressField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Dispatch.ServiceAccess.FileRepositoryService.DirectoryContentType ContentType {
            get {
                return this.ContentTypeField;
            }
            set {
                if ((this.ContentTypeField.Equals(value) != true)) {
                    this.ContentTypeField = value;
                    this.RaisePropertyChanged("ContentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UriAddress {
            get {
                return this.UriAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.UriAddressField, value) != true)) {
                    this.UriAddressField = value;
                    this.RaisePropertyChanged("UriAddress");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectoryContentType", Namespace="http://schemas.datacontract.org/2004/07/GPAS.FileRepository.Logic.Entities")]
    public enum DirectoryContentType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Directory = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        File = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileRepositoryService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/test", ReplyAction="http://tempuri.org/IService/testResponse")]
        string test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/test", ReplyAction="http://tempuri.org/IService/testResponse")]
        System.Threading.Tasks.Task<string> testAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsServiceAvailable", ReplyAction="http://tempuri.org/IService/IsServiceAvailableResponse")]
        bool IsServiceAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsServiceAvailable", ReplyAction="http://tempuri.org/IService/IsServiceAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsServiceAvailableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveAllFiles", ReplyAction="http://tempuri.org/IService/RemoveAllFilesResponse")]
        void RemoveAllFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveAllFiles", ReplyAction="http://tempuri.org/IService/RemoveAllFilesResponse")]
        System.Threading.Tasks.Task RemoveAllFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMediaPathContent", ReplyAction="http://tempuri.org/IService/GetMediaPathContentResponse")]
        GPAS.Dispatch.ServiceAccess.FileRepositoryService.DirectoryContent[] GetMediaPathContent(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMediaPathContent", ReplyAction="http://tempuri.org/IService/GetMediaPathContentResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.ServiceAccess.FileRepositoryService.DirectoryContent[]> GetMediaPathContentAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateMediaDirectory", ReplyAction="http://tempuri.org/IService/CreateMediaDirectoryResponse")]
        bool CreateMediaDirectory(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateMediaDirectory", ReplyAction="http://tempuri.org/IService/CreateMediaDirectoryResponse")]
        System.Threading.Tasks.Task<bool> CreateMediaDirectoryAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RenameMediaDirectory", ReplyAction="http://tempuri.org/IService/RenameMediaDirectoryResponse")]
        bool RenameMediaDirectory(string sourcePath, string targetPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RenameMediaDirectory", ReplyAction="http://tempuri.org/IService/RenameMediaDirectoryResponse")]
        System.Threading.Tasks.Task<bool> RenameMediaDirectoryAsync(string sourcePath, string targetPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteMediaDirectory", ReplyAction="http://tempuri.org/IService/DeleteMediaDirectoryResponse")]
        bool DeleteMediaDirectory(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteMediaDirectory", ReplyAction="http://tempuri.org/IService/DeleteMediaDirectoryResponse")]
        System.Threading.Tasks.Task<bool> DeleteMediaDirectoryAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadMediaFile", ReplyAction="http://tempuri.org/IService/UploadMediaFileResponse")]
        bool UploadMediaFile(byte[] fileToUpload, string fileName, string targetPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadMediaFile", ReplyAction="http://tempuri.org/IService/UploadMediaFileResponse")]
        System.Threading.Tasks.Task<bool> UploadMediaFileAsync(byte[] fileToUpload, string fileName, string targetPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DownloadMediaFile", ReplyAction="http://tempuri.org/IService/DownloadMediaFileResponse")]
        byte[] DownloadMediaFile(string mediaPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DownloadMediaFile", ReplyAction="http://tempuri.org/IService/DownloadMediaFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadMediaFileAsync(string mediaPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMediaFileSizeInBytes", ReplyAction="http://tempuri.org/IService/GetMediaFileSizeInBytesResponse")]
        long GetMediaFileSizeInBytes(string mediaPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMediaFileSizeInBytes", ReplyAction="http://tempuri.org/IService/GetMediaFileSizeInBytesResponse")]
        System.Threading.Tasks.Task<long> GetMediaFileSizeInBytesAsync(string mediaPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadDocumentFileByName", ReplyAction="http://tempuri.org/IService/UploadDocumentFileByNameResponse")]
        void UploadDocumentFileByName(string docName, byte[] docContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadDocumentFileByName", ReplyAction="http://tempuri.org/IService/UploadDocumentFileByNameResponse")]
        System.Threading.Tasks.Task UploadDocumentFileByNameAsync(string docName, byte[] docContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadDocumentFile", ReplyAction="http://tempuri.org/IService/UploadDocumentFileResponse")]
        void UploadDocumentFile(long docID, byte[] docContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadDocumentFile", ReplyAction="http://tempuri.org/IService/UploadDocumentFileResponse")]
        System.Threading.Tasks.Task UploadDocumentFileAsync(long docID, byte[] docContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadDataSourceFile", ReplyAction="http://tempuri.org/IService/UploadDataSourceFileResponse")]
        void UploadDataSourceFile(long dataSourceID, byte[] dataSourceContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadDataSourceFile", ReplyAction="http://tempuri.org/IService/UploadDataSourceFileResponse")]
        System.Threading.Tasks.Task UploadDataSourceFileAsync(long dataSourceID, byte[] dataSourceContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadFileAsDocumentAndDataSource", ReplyAction="http://tempuri.org/IService/UploadFileAsDocumentAndDataSourceResponse")]
        void UploadFileAsDocumentAndDataSource(byte[] fileContent, long docID, long dataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadFileAsDocumentAndDataSource", ReplyAction="http://tempuri.org/IService/UploadFileAsDocumentAndDataSourceResponse")]
        System.Threading.Tasks.Task UploadFileAsDocumentAndDataSourceAsync(byte[] fileContent, long docID, long dataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadDocumentFromJobShare", ReplyAction="http://tempuri.org/IService/UploadDocumentFromJobShareResponse")]
        void UploadDocumentFromJobShare(long docID, string docJobSharePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadDocumentFromJobShare", ReplyAction="http://tempuri.org/IService/UploadDocumentFromJobShareResponse")]
        System.Threading.Tasks.Task UploadDocumentFromJobShareAsync(long docID, string docJobSharePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadDataSourceFromJobShare", ReplyAction="http://tempuri.org/IService/UploadDataSourceFromJobShareResponse")]
        void UploadDataSourceFromJobShare(long dataSourceID, string dataSourceJobSharePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadDataSourceFromJobShare", ReplyAction="http://tempuri.org/IService/UploadDataSourceFromJobShareResponse")]
        System.Threading.Tasks.Task UploadDataSourceFromJobShareAsync(long dataSourceID, string dataSourceJobSharePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DownloadDocumentFile", ReplyAction="http://tempuri.org/IService/DownloadDocumentFileResponse")]
        byte[] DownloadDocumentFile(long docID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DownloadDocumentFile", ReplyAction="http://tempuri.org/IService/DownloadDocumentFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadDocumentFileAsync(long docID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DownloadDataSourceFile", ReplyAction="http://tempuri.org/IService/DownloadDataSourceFileResponse")]
        byte[] DownloadDataSourceFile(long dataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DownloadDataSourceFile", ReplyAction="http://tempuri.org/IService/DownloadDataSourceFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadDataSourceFileAsync(long dataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataSourceAndDocumentFileSizeInBytes", ReplyAction="http://tempuri.org/IService/GetDataSourceAndDocumentFileSizeInBytesResponse")]
        long GetDataSourceAndDocumentFileSizeInBytes(string docId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataSourceAndDocumentFileSizeInBytes", ReplyAction="http://tempuri.org/IService/GetDataSourceAndDocumentFileSizeInBytesResponse")]
        System.Threading.Tasks.Task<long> GetDataSourceAndDocumentFileSizeInBytesAsync(string docId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsAvailable", ReplyAction="http://tempuri.org/IService/IsAvailableResponse")]
        void IsAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsAvailable", ReplyAction="http://tempuri.org/IService/IsAvailableResponse")]
        System.Threading.Tasks.Task IsAvailableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DownloadDataSourceFileByName", ReplyAction="http://tempuri.org/IService/DownloadDataSourceFileByNameResponse")]
        byte[] DownloadDataSourceFileByName(string dataSourceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DownloadDataSourceFileByName", ReplyAction="http://tempuri.org/IService/DownloadDataSourceFileByNameResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadDataSourceFileByNameAsync(string dataSourceName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : GPAS.Dispatch.ServiceAccess.FileRepositoryService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<GPAS.Dispatch.ServiceAccess.FileRepositoryService.IService>, GPAS.Dispatch.ServiceAccess.FileRepositoryService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string test() {
            return base.Channel.test();
        }
        
        public System.Threading.Tasks.Task<string> testAsync() {
            return base.Channel.testAsync();
        }
        
        public bool IsServiceAvailable() {
            return base.Channel.IsServiceAvailable();
        }
        
        public System.Threading.Tasks.Task<bool> IsServiceAvailableAsync() {
            return base.Channel.IsServiceAvailableAsync();
        }
        
        public void RemoveAllFiles() {
            base.Channel.RemoveAllFiles();
        }
        
        public System.Threading.Tasks.Task RemoveAllFilesAsync() {
            return base.Channel.RemoveAllFilesAsync();
        }
        
        public GPAS.Dispatch.ServiceAccess.FileRepositoryService.DirectoryContent[] GetMediaPathContent(string path) {
            return base.Channel.GetMediaPathContent(path);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.ServiceAccess.FileRepositoryService.DirectoryContent[]> GetMediaPathContentAsync(string path) {
            return base.Channel.GetMediaPathContentAsync(path);
        }
        
        public bool CreateMediaDirectory(string path) {
            return base.Channel.CreateMediaDirectory(path);
        }
        
        public System.Threading.Tasks.Task<bool> CreateMediaDirectoryAsync(string path) {
            return base.Channel.CreateMediaDirectoryAsync(path);
        }
        
        public bool RenameMediaDirectory(string sourcePath, string targetPath) {
            return base.Channel.RenameMediaDirectory(sourcePath, targetPath);
        }
        
        public System.Threading.Tasks.Task<bool> RenameMediaDirectoryAsync(string sourcePath, string targetPath) {
            return base.Channel.RenameMediaDirectoryAsync(sourcePath, targetPath);
        }
        
        public bool DeleteMediaDirectory(string path) {
            return base.Channel.DeleteMediaDirectory(path);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMediaDirectoryAsync(string path) {
            return base.Channel.DeleteMediaDirectoryAsync(path);
        }
        
        public bool UploadMediaFile(byte[] fileToUpload, string fileName, string targetPath) {
            return base.Channel.UploadMediaFile(fileToUpload, fileName, targetPath);
        }
        
        public System.Threading.Tasks.Task<bool> UploadMediaFileAsync(byte[] fileToUpload, string fileName, string targetPath) {
            return base.Channel.UploadMediaFileAsync(fileToUpload, fileName, targetPath);
        }
        
        public byte[] DownloadMediaFile(string mediaPath) {
            return base.Channel.DownloadMediaFile(mediaPath);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadMediaFileAsync(string mediaPath) {
            return base.Channel.DownloadMediaFileAsync(mediaPath);
        }
        
        public long GetMediaFileSizeInBytes(string mediaPath) {
            return base.Channel.GetMediaFileSizeInBytes(mediaPath);
        }
        
        public System.Threading.Tasks.Task<long> GetMediaFileSizeInBytesAsync(string mediaPath) {
            return base.Channel.GetMediaFileSizeInBytesAsync(mediaPath);
        }
        
        public void UploadDocumentFileByName(string docName, byte[] docContent) {
            base.Channel.UploadDocumentFileByName(docName, docContent);
        }
        
        public System.Threading.Tasks.Task UploadDocumentFileByNameAsync(string docName, byte[] docContent) {
            return base.Channel.UploadDocumentFileByNameAsync(docName, docContent);
        }
        
        public void UploadDocumentFile(long docID, byte[] docContent) {
            base.Channel.UploadDocumentFile(docID, docContent);
        }
        
        public System.Threading.Tasks.Task UploadDocumentFileAsync(long docID, byte[] docContent) {
            return base.Channel.UploadDocumentFileAsync(docID, docContent);
        }
        
        public void UploadDataSourceFile(long dataSourceID, byte[] dataSourceContent) {
            base.Channel.UploadDataSourceFile(dataSourceID, dataSourceContent);
        }
        
        public System.Threading.Tasks.Task UploadDataSourceFileAsync(long dataSourceID, byte[] dataSourceContent) {
            return base.Channel.UploadDataSourceFileAsync(dataSourceID, dataSourceContent);
        }
        
        public void UploadFileAsDocumentAndDataSource(byte[] fileContent, long docID, long dataSourceID) {
            base.Channel.UploadFileAsDocumentAndDataSource(fileContent, docID, dataSourceID);
        }
        
        public System.Threading.Tasks.Task UploadFileAsDocumentAndDataSourceAsync(byte[] fileContent, long docID, long dataSourceID) {
            return base.Channel.UploadFileAsDocumentAndDataSourceAsync(fileContent, docID, dataSourceID);
        }
        
        public void UploadDocumentFromJobShare(long docID, string docJobSharePath) {
            base.Channel.UploadDocumentFromJobShare(docID, docJobSharePath);
        }
        
        public System.Threading.Tasks.Task UploadDocumentFromJobShareAsync(long docID, string docJobSharePath) {
            return base.Channel.UploadDocumentFromJobShareAsync(docID, docJobSharePath);
        }
        
        public void UploadDataSourceFromJobShare(long dataSourceID, string dataSourceJobSharePath) {
            base.Channel.UploadDataSourceFromJobShare(dataSourceID, dataSourceJobSharePath);
        }
        
        public System.Threading.Tasks.Task UploadDataSourceFromJobShareAsync(long dataSourceID, string dataSourceJobSharePath) {
            return base.Channel.UploadDataSourceFromJobShareAsync(dataSourceID, dataSourceJobSharePath);
        }
        
        public byte[] DownloadDocumentFile(long docID) {
            return base.Channel.DownloadDocumentFile(docID);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadDocumentFileAsync(long docID) {
            return base.Channel.DownloadDocumentFileAsync(docID);
        }
        
        public byte[] DownloadDataSourceFile(long dataSourceID) {
            return base.Channel.DownloadDataSourceFile(dataSourceID);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadDataSourceFileAsync(long dataSourceID) {
            return base.Channel.DownloadDataSourceFileAsync(dataSourceID);
        }
        
        public long GetDataSourceAndDocumentFileSizeInBytes(string docId) {
            return base.Channel.GetDataSourceAndDocumentFileSizeInBytes(docId);
        }
        
        public System.Threading.Tasks.Task<long> GetDataSourceAndDocumentFileSizeInBytesAsync(string docId) {
            return base.Channel.GetDataSourceAndDocumentFileSizeInBytesAsync(docId);
        }
        
        public void IsAvailable() {
            base.Channel.IsAvailable();
        }
        
        public System.Threading.Tasks.Task IsAvailableAsync() {
            return base.Channel.IsAvailableAsync();
        }
        
        public byte[] DownloadDataSourceFileByName(string dataSourceName) {
            return base.Channel.DownloadDataSourceFileByName(dataSourceName);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadDataSourceFileByNameAsync(string dataSourceName) {
            return base.Channel.DownloadDataSourceFileByNameAsync(dataSourceName);
        }
    }
}
