//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GPAS.Dispatch.ServiceAccess.HorizonService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomSearchAroundResultIDs", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Horizon.Entities")]
    [System.SerializableAttribute()]
    public partial class CustomSearchAroundResultIDs : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Dispatch.Entities.Concepts.SearchAroundResult.EventBasedResultsPerSearchedObjects[] EventBasedNotLoadedResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[] RelationshipNotLoadedResultIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SearchAroundStepGuidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Dispatch.Entities.Concepts.SearchAroundResult.EventBasedResultsPerSearchedObjects[] EventBasedNotLoadedResults {
            get {
                return this.EventBasedNotLoadedResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.EventBasedNotLoadedResultsField, value) != true)) {
                    this.EventBasedNotLoadedResultsField = value;
                    this.RaisePropertyChanged("EventBasedNotLoadedResults");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[] RelationshipNotLoadedResultIDs {
            get {
                return this.RelationshipNotLoadedResultIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationshipNotLoadedResultIDsField, value) != true)) {
                    this.RelationshipNotLoadedResultIDsField = value;
                    this.RaisePropertyChanged("RelationshipNotLoadedResultIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SearchAroundStepGuid {
            get {
                return this.SearchAroundStepGuidField;
            }
            set {
                if ((this.SearchAroundStepGuidField.Equals(value) != true)) {
                    this.SearchAroundStepGuidField = value;
                    this.RaisePropertyChanged("SearchAroundStepGuid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HorizonIndexCheckingInput", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Horizon.Entities.IndexChecking")]
    [System.SerializableAttribute()]
    public partial class HorizonIndexCheckingInput : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ObjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObjectTypeUriField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Dispatch.Entities.Concepts.KProperty[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] RelationsIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ResultLimitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((this.ObjectIdField.Equals(value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjectTypeUri {
            get {
                return this.ObjectTypeUriField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectTypeUriField, value) != true)) {
                    this.ObjectTypeUriField = value;
                    this.RaisePropertyChanged("ObjectTypeUri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Dispatch.Entities.Concepts.KProperty[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] RelationsIds {
            get {
                return this.RelationsIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationsIdsField, value) != true)) {
                    this.RelationsIdsField = value;
                    this.RaisePropertyChanged("RelationsIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ResultLimit {
            get {
                return this.ResultLimitField;
            }
            set {
                if ((this.ResultLimitField.Equals(value) != true)) {
                    this.ResultLimitField = value;
                    this.RaisePropertyChanged("ResultLimit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HorizonIndexCheckingResult", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Horizon.Entities.IndexChecking")]
    [System.SerializableAttribute()]
    public partial class HorizonIndexCheckingResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ObjectIndexStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Dispatch.ServiceAccess.HorizonService.IndexingStatus[] PropertiesIndexStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GPAS.Dispatch.ServiceAccess.HorizonService.IndexingStatus[] RelationsIndexStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ObjectIndexStatus {
            get {
                return this.ObjectIndexStatusField;
            }
            set {
                if ((this.ObjectIndexStatusField.Equals(value) != true)) {
                    this.ObjectIndexStatusField = value;
                    this.RaisePropertyChanged("ObjectIndexStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Dispatch.ServiceAccess.HorizonService.IndexingStatus[] PropertiesIndexStatus {
            get {
                return this.PropertiesIndexStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesIndexStatusField, value) != true)) {
                    this.PropertiesIndexStatusField = value;
                    this.RaisePropertyChanged("PropertiesIndexStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPAS.Dispatch.ServiceAccess.HorizonService.IndexingStatus[] RelationsIndexStatus {
            get {
                return this.RelationsIndexStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationsIndexStatusField, value) != true)) {
                    this.RelationsIndexStatusField = value;
                    this.RaisePropertyChanged("RelationsIndexStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndexingStatus", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Horizon.Entities.IndexChecking")]
    [System.SerializableAttribute()]
    public partial class IndexingStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IndexStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IndexStatus {
            get {
                return this.IndexStatusField;
            }
            set {
                if ((this.IndexStatusField.Equals(value) != true)) {
                    this.IndexStatusField = value;
                    this.RaisePropertyChanged("IndexStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndexModel", Namespace="http://schemas.datacontract.org/2004/07/GPAS.Horizon.Entities")]
    [System.SerializableAttribute()]
    public partial class IndexModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PropertiesTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeType {
            get {
                return this.NodeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeTypeField, value) != true)) {
                    this.NodeTypeField = value;
                    this.RaisePropertyChanged("NodeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PropertiesType {
            get {
                return this.PropertiesTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesTypeField, value) != true)) {
                    this.PropertiesTypeField = value;
                    this.RaisePropertyChanged("PropertiesType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HorizonService.IService", SessionMode=System.ServiceModel.SessionMode.NotAllowed)]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ResetIndexes", ReplyAction="http://tempuri.org/IService/ResetIndexesResponse")]
        void ResetIndexes(bool DeleteExistingIndexes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ResetIndexes", ReplyAction="http://tempuri.org/IService/ResetIndexesResponse")]
        System.Threading.Tasks.Task ResetIndexesAsync(bool DeleteExistingIndexes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SyncPublishChanges", ReplyAction="http://tempuri.org/IService/SyncPublishChangesResponse")]
        GPAS.Dispatch.Entities.Publish.SynchronizationResult SyncPublishChanges(GPAS.Dispatch.Entities.Publish.AddedConcepts addedConcept, GPAS.Dispatch.Entities.Publish.ModifiedConcepts modifiedConcept, long dataSourceID, bool isContinousPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SyncPublishChanges", ReplyAction="http://tempuri.org/IService/SyncPublishChangesResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Publish.SynchronizationResult> SyncPublishChangesAsync(GPAS.Dispatch.Entities.Publish.AddedConcepts addedConcept, GPAS.Dispatch.Entities.Publish.ModifiedConcepts modifiedConcept, long dataSourceID, bool isContinousPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddNewGroupPropertiesToEdgeClass", ReplyAction="http://tempuri.org/IService/AddNewGroupPropertiesToEdgeClassResponse")]
        void AddNewGroupPropertiesToEdgeClass(string[] newGroupsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddNewGroupPropertiesToEdgeClass", ReplyAction="http://tempuri.org/IService/AddNewGroupPropertiesToEdgeClassResponse")]
        System.Threading.Tasks.Task AddNewGroupPropertiesToEdgeClassAsync(string[] newGroupsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRelatedEntities", ReplyAction="http://tempuri.org/IService/FindRelatedEntitiesResponse")]
        GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[] FindRelatedEntities(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRelatedEntities", ReplyAction="http://tempuri.org/IService/FindRelatedEntitiesResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[]> FindRelatedEntitiesAsync(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRelatedDocuments", ReplyAction="http://tempuri.org/IService/FindRelatedDocumentsResponse")]
        GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[] FindRelatedDocuments(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRelatedDocuments", ReplyAction="http://tempuri.org/IService/FindRelatedDocumentsResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[]> FindRelatedDocumentsAsync(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRelatedEvents", ReplyAction="http://tempuri.org/IService/FindRelatedEventsResponse")]
        GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[] FindRelatedEvents(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRelatedEvents", ReplyAction="http://tempuri.org/IService/FindRelatedEventsResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[]> FindRelatedEventsAsync(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRelatedEntitiesAppearedInEvents", ReplyAction="http://tempuri.org/IService/FindRelatedEntitiesAppearedInEventsResponse")]
        GPAS.Dispatch.Entities.Concepts.SearchAroundResult.EventBasedResultsPerSearchedObjects[] FindRelatedEntitiesAppearedInEvents(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRelatedEntitiesAppearedInEvents", ReplyAction="http://tempuri.org/IService/FindRelatedEntitiesAppearedInEventsResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.EventBasedResultsPerSearchedObjects[]> FindRelatedEntitiesAppearedInEventsAsync(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/PerformCustomSearchAround", ReplyAction="http://tempuri.org/IService/PerformCustomSearchAroundResponse")]
        GPAS.Dispatch.ServiceAccess.HorizonService.CustomSearchAroundResultIDs[] PerformCustomSearchAround(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, byte[] serializedCustomSearchAroundCriteria, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/PerformCustomSearchAround", ReplyAction="http://tempuri.org/IService/PerformCustomSearchAroundResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.ServiceAccess.HorizonService.CustomSearchAroundResultIDs[]> PerformCustomSearchAroundAsync(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, byte[] serializedCustomSearchAroundCriteria, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsDataIndicesStable", ReplyAction="http://tempuri.org/IService/IsDataIndicesStableResponse")]
        bool IsDataIndicesStable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsDataIndicesStable", ReplyAction="http://tempuri.org/IService/IsDataIndicesStableResponse")]
        System.Threading.Tasks.Task<bool> IsDataIndicesStableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveHorizonIndexes", ReplyAction="http://tempuri.org/IService/RemoveHorizonIndexesResponse")]
        void RemoveHorizonIndexes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveHorizonIndexes", ReplyAction="http://tempuri.org/IService/RemoveHorizonIndexesResponse")]
        System.Threading.Tasks.Task RemoveHorizonIndexesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/HorizonIndexChecking", ReplyAction="http://tempuri.org/IService/HorizonIndexCheckingResponse")]
        GPAS.Dispatch.ServiceAccess.HorizonService.HorizonIndexCheckingResult HorizonIndexChecking(GPAS.Dispatch.ServiceAccess.HorizonService.HorizonIndexCheckingInput input, GPAS.AccessControl.AuthorizationParametters authorizationParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/HorizonIndexChecking", ReplyAction="http://tempuri.org/IService/HorizonIndexCheckingResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.ServiceAccess.HorizonService.HorizonIndexCheckingResult> HorizonIndexCheckingAsync(GPAS.Dispatch.ServiceAccess.HorizonService.HorizonIndexCheckingInput input, GPAS.AccessControl.AuthorizationParametters authorizationParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllIndexes", ReplyAction="http://tempuri.org/IService/GetAllIndexesResponse")]
        GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel[] GetAllIndexes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllIndexes", ReplyAction="http://tempuri.org/IService/GetAllIndexesResponse")]
        System.Threading.Tasks.Task<GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel[]> GetAllIndexesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateIndex", ReplyAction="http://tempuri.org/IService/CreateIndexResponse")]
        void CreateIndex(GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateIndex", ReplyAction="http://tempuri.org/IService/CreateIndexResponse")]
        System.Threading.Tasks.Task CreateIndexAsync(GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditIndex", ReplyAction="http://tempuri.org/IService/EditIndexResponse")]
        void EditIndex(GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel oldIndex, GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel newIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditIndex", ReplyAction="http://tempuri.org/IService/EditIndexResponse")]
        System.Threading.Tasks.Task EditIndexAsync(GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel oldIndex, GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel newIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteIndex", ReplyAction="http://tempuri.org/IService/DeleteIndexResponse")]
        void DeleteIndex(GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteIndex", ReplyAction="http://tempuri.org/IService/DeleteIndexResponse")]
        System.Threading.Tasks.Task DeleteIndexAsync(GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllIndexes", ReplyAction="http://tempuri.org/IService/DeleteAllIndexesResponse")]
        void DeleteAllIndexes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllIndexes", ReplyAction="http://tempuri.org/IService/DeleteAllIndexesResponse")]
        System.Threading.Tasks.Task DeleteAllIndexesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsAvailable", ReplyAction="http://tempuri.org/IService/IsAvailableResponse")]
        void IsAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsAvailable", ReplyAction="http://tempuri.org/IService/IsAvailableResponse")]
        System.Threading.Tasks.Task IsAvailableAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : GPAS.Dispatch.ServiceAccess.HorizonService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<GPAS.Dispatch.ServiceAccess.HorizonService.IService>, GPAS.Dispatch.ServiceAccess.HorizonService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ResetIndexes(bool DeleteExistingIndexes) {
            base.Channel.ResetIndexes(DeleteExistingIndexes);
        }
        
        public System.Threading.Tasks.Task ResetIndexesAsync(bool DeleteExistingIndexes) {
            return base.Channel.ResetIndexesAsync(DeleteExistingIndexes);
        }
        
        public GPAS.Dispatch.Entities.Publish.SynchronizationResult SyncPublishChanges(GPAS.Dispatch.Entities.Publish.AddedConcepts addedConcept, GPAS.Dispatch.Entities.Publish.ModifiedConcepts modifiedConcept, long dataSourceID, bool isContinousPublish) {
            return base.Channel.SyncPublishChanges(addedConcept, modifiedConcept, dataSourceID, isContinousPublish);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Publish.SynchronizationResult> SyncPublishChangesAsync(GPAS.Dispatch.Entities.Publish.AddedConcepts addedConcept, GPAS.Dispatch.Entities.Publish.ModifiedConcepts modifiedConcept, long dataSourceID, bool isContinousPublish) {
            return base.Channel.SyncPublishChangesAsync(addedConcept, modifiedConcept, dataSourceID, isContinousPublish);
        }
        
        public void AddNewGroupPropertiesToEdgeClass(string[] newGroupsName) {
            base.Channel.AddNewGroupPropertiesToEdgeClass(newGroupsName);
        }
        
        public System.Threading.Tasks.Task AddNewGroupPropertiesToEdgeClassAsync(string[] newGroupsName) {
            return base.Channel.AddNewGroupPropertiesToEdgeClassAsync(newGroupsName);
        }
        
        public GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[] FindRelatedEntities(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters) {
            return base.Channel.FindRelatedEntities(searchedObjects, resultLimit, authorizationParametters);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[]> FindRelatedEntitiesAsync(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters) {
            return base.Channel.FindRelatedEntitiesAsync(searchedObjects, resultLimit, authorizationParametters);
        }
        
        public GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[] FindRelatedDocuments(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters) {
            return base.Channel.FindRelatedDocuments(searchedObjects, resultLimit, authorizationParametters);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[]> FindRelatedDocumentsAsync(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters) {
            return base.Channel.FindRelatedDocumentsAsync(searchedObjects, resultLimit, authorizationParametters);
        }
        
        public GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[] FindRelatedEvents(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters) {
            return base.Channel.FindRelatedEvents(searchedObjects, resultLimit, authorizationParametters);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.RelationshipBasedResultsPerSearchedObjects[]> FindRelatedEventsAsync(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters) {
            return base.Channel.FindRelatedEventsAsync(searchedObjects, resultLimit, authorizationParametters);
        }
        
        public GPAS.Dispatch.Entities.Concepts.SearchAroundResult.EventBasedResultsPerSearchedObjects[] FindRelatedEntitiesAppearedInEvents(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters) {
            return base.Channel.FindRelatedEntitiesAppearedInEvents(searchedObjects, resultLimit, authorizationParametters);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.Entities.Concepts.SearchAroundResult.EventBasedResultsPerSearchedObjects[]> FindRelatedEntitiesAppearedInEventsAsync(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters) {
            return base.Channel.FindRelatedEntitiesAppearedInEventsAsync(searchedObjects, resultLimit, authorizationParametters);
        }
        
        public GPAS.Dispatch.ServiceAccess.HorizonService.CustomSearchAroundResultIDs[] PerformCustomSearchAround(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, byte[] serializedCustomSearchAroundCriteria, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters) {
            return base.Channel.PerformCustomSearchAround(searchedObjects, serializedCustomSearchAroundCriteria, resultLimit, authorizationParametters);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.ServiceAccess.HorizonService.CustomSearchAroundResultIDs[]> PerformCustomSearchAroundAsync(System.Collections.Generic.Dictionary<string, long[]> searchedObjects, byte[] serializedCustomSearchAroundCriteria, long resultLimit, GPAS.AccessControl.AuthorizationParametters authorizationParametters) {
            return base.Channel.PerformCustomSearchAroundAsync(searchedObjects, serializedCustomSearchAroundCriteria, resultLimit, authorizationParametters);
        }
        
        public bool IsDataIndicesStable() {
            return base.Channel.IsDataIndicesStable();
        }
        
        public System.Threading.Tasks.Task<bool> IsDataIndicesStableAsync() {
            return base.Channel.IsDataIndicesStableAsync();
        }
        
        public void RemoveHorizonIndexes() {
            base.Channel.RemoveHorizonIndexes();
        }
        
        public System.Threading.Tasks.Task RemoveHorizonIndexesAsync() {
            return base.Channel.RemoveHorizonIndexesAsync();
        }
        
        public GPAS.Dispatch.ServiceAccess.HorizonService.HorizonIndexCheckingResult HorizonIndexChecking(GPAS.Dispatch.ServiceAccess.HorizonService.HorizonIndexCheckingInput input, GPAS.AccessControl.AuthorizationParametters authorizationParameters) {
            return base.Channel.HorizonIndexChecking(input, authorizationParameters);
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.ServiceAccess.HorizonService.HorizonIndexCheckingResult> HorizonIndexCheckingAsync(GPAS.Dispatch.ServiceAccess.HorizonService.HorizonIndexCheckingInput input, GPAS.AccessControl.AuthorizationParametters authorizationParameters) {
            return base.Channel.HorizonIndexCheckingAsync(input, authorizationParameters);
        }
        
        public GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel[] GetAllIndexes() {
            return base.Channel.GetAllIndexes();
        }
        
        public System.Threading.Tasks.Task<GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel[]> GetAllIndexesAsync() {
            return base.Channel.GetAllIndexesAsync();
        }
        
        public void CreateIndex(GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel index) {
            base.Channel.CreateIndex(index);
        }
        
        public System.Threading.Tasks.Task CreateIndexAsync(GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel index) {
            return base.Channel.CreateIndexAsync(index);
        }
        
        public void EditIndex(GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel oldIndex, GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel newIndex) {
            base.Channel.EditIndex(oldIndex, newIndex);
        }
        
        public System.Threading.Tasks.Task EditIndexAsync(GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel oldIndex, GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel newIndex) {
            return base.Channel.EditIndexAsync(oldIndex, newIndex);
        }
        
        public void DeleteIndex(GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel index) {
            base.Channel.DeleteIndex(index);
        }
        
        public System.Threading.Tasks.Task DeleteIndexAsync(GPAS.Dispatch.ServiceAccess.HorizonService.IndexModel index) {
            return base.Channel.DeleteIndexAsync(index);
        }
        
        public void DeleteAllIndexes() {
            base.Channel.DeleteAllIndexes();
        }
        
        public System.Threading.Tasks.Task DeleteAllIndexesAsync() {
            return base.Channel.DeleteAllIndexesAsync();
        }
        
        public void IsAvailable() {
            base.Channel.IsAvailable();
        }
        
        public System.Threading.Tasks.Task IsAvailableAsync() {
            return base.Channel.IsAvailableAsync();
        }
    }
}
